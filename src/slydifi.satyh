@require: pervasives
@import: frame
@import: overlay

%% フォント設定記述方法。
%% [set-font-size 12pt; set-text-color Color.blue] みたいな感じで書く。
type font-config = (context -> context) list

%% font-config を受け取り、特定の context を context に変換する。
let apply-font-cfg : font-config -> context -> context
  | cfgs ctx =
  cfgs |> List.fold-left (fun ctx ctxf -> ctxf ctx) ctx

%% SLyDIFi のすべてのテーマの元となる scheme。
module SlydifiScheme: sig

  val document-scheme:  frame-layout -> ((|page-number : int|) -> (length * length) -> unit) -> block-text -> document

  val +genframe: ['content Frame.frame; int; 'content] block-cmd

  direct +p: [(int -> bool)?; inline-text] block-cmd

end = struct

  let-inline ctx \math fml = script-guard Latin (embed-math ctx fml)

  % standard な context を設定
  let get-standard-context wid =
    get-initial-context wid (command \math)
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-hyphen-penalty 100

  let document-scheme layout hookf inner =
    let page = UserDefinedPaper (layout#paper-width, layout#paper-height) in
    let pagecontf _ =
      (|
        text-origin = (layout#text-horizontal-margin, layout#bg-gr-start-point);
        text-height = layout#text-height;
      |)
    in
    let pagepartsf pbinfo =
      (|
      header-origin  = (0pt, 0pt);
      header-content = block-nil;
      footer-origin  = (0pt, 0pt);
      footer-content = block-nil;
      |)
    in

    let bb-main =
      let ctx-doc = (get-standard-context layout#text-width) |> layout#default-ctx in
      read-block ctx-doc inner
    in

    let hook = line-break false false (get-standard-context 0pt)
        (hook-page-break hookf)
    in

    page-break page pagecontf pagepartsf (bb-main +++ hook)

  let-block ctx +genframe frame n-layer content =
    frame |> SlydifiOverlay.multiframe n-layer ctx content

  let-block ctx +p ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    SlydifiOverlay.ghost-block dcf (line-break true true ctx (read-inline ctx it ++ inline-fil))

end


let-inline ctx \SLyDIFi =
  let size = get-font-size ctx in
  let f = read-inline ctx in
  let fd = ctx |> set-manual-rising (0pt -' (size *' 0.25)) |> read-inline in
  let fI = ctx |> set-font-size (size *' 0.72)
               |> set-manual-rising (size *' 0.2)
               |> read-inline
  in
  let ib = 
    f {SL} ++ kern(size *' 0.05) ++ fd{Y} ++ kern(size *' 0.03) ++ f{DIF}
      ++ kern(size *' 0.05) ++ fd{I}
  in
  script-guard Latin (no-break ib)
