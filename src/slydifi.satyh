@require: pervasives
@require: gr
@import: frame
@import: overlay
@import: footnote

%% フォント設定記述方法。
%% [set-font-size 12pt; set-text-color Color.blue] みたいな感じで書く。
type font-config = (context -> context) list

%% SLyDIFi のすべてのテーマの元となる scheme。
module SlydifiScheme: sig

  %% スライド作成用の document 関数を生成する。
  %% Parameters:
  %%   layout (frame-layout): フレーム全体に関係するレイアウト。
  %%   init-ctx (context -> context): 文書全体にかけるテキスト処理文脈の変換関数。
  %%   hookf ((|page-number : int|) -> (length * length) -> unit):
  %%     フック関数。スライドの最後に起動する。ページの総数を受け取りたい場合などに便利。
  %%   inner (block-text): スライド本体のブロックテキスト。
  val document-scheme: frame-layout -> (context -> context) -> ((|page-number : int|) -> (length * length) -> unit) -> block-text -> document

  %% font-config を受け取り、特定の context を context に変換する。
  val apply-font-cfg : font-config -> context -> context

  val +genframe: ['content Frame.frame; int; 'content] block-cmd

% common commands
  direct +p: [(int -> bool)?; inline-text] block-cmd

  direct \ctx : [(int -> bool)?; (context -> context); inline-text] inline-cmd
  direct +ctx : [(int -> bool)?; (context -> context); block-text] block-cmd

  direct \br: [] inline-cmd
  direct \text-color: [(int -> bool)?; color; inline-text] inline-cmd
  direct \uline : [(int -> bool)?; inline-text] inline-cmd
  direct \strike : [(int -> bool)?; inline-text] inline-cmd

  direct +show-in-order: [block-text list] block-cmd

end = struct

  let-inline ctx \math fml = script-guard Latin (embed-math ctx fml)

  % standard な context を設定
  let get-standard-context wid =
    get-initial-context wid (command \math)
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-hyphen-penalty 100

  let apply-font-cfg cfgs ctx =
    cfgs |> List.fold-left (fun ctx ctxf -> ctxf ctx) ctx

% document scheme
  let document-scheme layout init-ctx hookf inner =
    let page = UserDefinedPaper (layout#paper-width, layout#paper-height) in
    let pagecontf _ =
      let () = FootnoteScheme.start-page () in
      (|
        text-origin = (layout#text-horizontal-margin, layout#bg-gr-start-point);
        text-height = layout#text-height;
      |)
    in
    let pagepartsf pbinfo =
      (|
      header-origin  = (0pt, 0pt);
      header-content = block-nil;
      footer-origin  = (0pt, 0pt);
      footer-content = block-nil;
      |)
    in

    let bb-main =
      let ctx-doc = get-standard-context layout#text-width |> init-ctx in
      read-block ctx-doc inner
    in

    let hook = line-break false false (get-standard-context 0pt)
        (hook-page-break hookf)
    in

    page-break page pagecontf pagepartsf (bb-main +++ hook)

  let-block ctx +genframe frame n-layer content =
    frame |> SlydifiOverlay.multiframe n-layer ctx content

% common commands
  let-block ctx +p ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    SlydifiOverlay.ghost-block dcf (line-break true true ctx (read-inline ctx it ++ inline-fil))

  let-inline ctx \br = discretionary (- 1000) inline-nil inline-fil inline-nil

  let-inline ctx \text-color ?:dcf clr it =
    let dcf = Option.from (fun _ -> true) dcf in
    SlydifiOverlay.select dcf
      (read-inline (ctx |> set-text-color clr) it)
        (read-inline ctx it)

  let-inline ctx \uline ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ib = read-inline ctx it in
    let pad (x, y) w h d =
      SlydifiOverlay.select dcf (
        [
          stroke 1pt (get-text-color ctx)
            (Gr.line (x, y -' d) (x +' w, y  -' d))
        ]
      )(
        []
      )
    in
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt) (pad, pad, pad, pad) ib

  let-inline ctx \strike ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ib = read-inline ctx it in
    let pad (x, y) w h d =
      SlydifiOverlay.select dcf (
        let h-base = get-font-size ctx *' 0.3 in
        [
          stroke 1pt (get-text-color ctx)
            (Gr.line (x, y +' h-base) (x +' w, y +' h-base))
        ]
      )(
        []
      )
    in
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt) (pad, pad, pad, pad) ib

  let-inline ctx \ctx ?:dcf ctxf it =
    let dcf = Option.from (fun _ -> true) dcf in
    read-inline (SlydifiOverlay.select dcf (ctxf ctx) ctx) it

  let-block  ctx +ctx ?:dcf ctxf bt =
    let dcf = Option.from (fun _ -> true) dcf in
    read-block (SlydifiOverlay.select dcf (ctxf ctx) ctx) bt

  let-block ctx +show-in-order btlst =
    let ghost-btlst = btlst |> List.mapi ( fun idx bt ->(
      let dcf = SlydifiOverlay.after (idx + 1) in
      SlydifiOverlay.ghost-block dcf (read-block ctx bt)))
    in
    ghost-btlst |> List.fold-left (+++) block-nil

end


let-inline ctx \SLyDIFi =
  let size = get-font-size ctx in
  let f = read-inline ctx in
  let fd = ctx |> set-manual-rising (0pt -' (size *' 0.25)) |> read-inline in
  let fI = ctx |> set-font-size (size *' 0.72)
               |> set-manual-rising (size *' 0.2)
               |> read-inline
  in
  let ib = 
    f {SL} ++ kern(size *' 0.05) ++ fd{Y} ++ kern(size *' 0.03) ++ f{DIF}
      ++ kern(size *' 0.05) ++ fd{I}
  in
  script-guard Latin (no-break ib)
