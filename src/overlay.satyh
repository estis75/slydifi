@require: list
@import: param
@import: frame

module SlydifiOverlay : sig

  val layer : int SlydifiParam.t

  % let frames = frame-scheme-overlay ctx n-layer frame-f itlst btlst
  % の形で用いる．
  % n-layer: オーバーレイを行いたいレイヤーの数．
  % itlst: layer の値に応じて異なる「発火」を行いたいような inline-text のリスト．
  % btlst: layer の値に応じて異なる「発火」を行いたいような block-text のリスト．
  % frame-f: itlst と btlst さえ与えられたらフレームが出来上がるような関数．
  val frame-scheme-overlay :
    context -> int -> (inline-text list -> block-text list -> block-boxes)
    -> inline-text list -> block-text list -> block-boxes

  val multiframe: int -> context -> 'layout -> 'content -> 'layout 'content Frame.frame -> block-boxes
    constraint 'layout :: (|
      base: basic-layout;
    |)

  % display-condition: int -> bool
  %   表示条件．
  % 第一引数 (display condition) に現在のレイヤー番号を渡して得られる bool が true なら第2引数を描画．
  % そうでなければ inline-nil/block-nil を返す．
  val ghost-inline : (int -> bool) -> inline-boxes -> inline-boxes
  val ghost-block : (int -> bool) -> block-boxes -> block-boxes
  direct \ghost : [(int -> bool); inline-text] inline-cmd
  direct +ghost : [(int -> bool); block-text] block-cmd

  % 第一引数に現在のレイヤー番号を渡して得られる bool が true なら第2引数を描画．
  % そうでなければ第2引数に与えられたものと同じ大きさの空白を返す．
  val phantom-inline : (int -> bool) -> inline-boxes -> inline-boxes
  val phantom-block : (int -> bool) -> block-boxes -> block-boxes
  direct \phantom : [(int -> bool); inline-text] inline-cmd
  direct +phantom : [(int -> bool); block-text] block-cmd

  % 第一引数 (display condition) に現在のレイヤー番号を渡して得られる bool が true なら第2引数を描画．
  % そうでなければ inline-nil/block-nil を返す．
  val select : (int -> bool) -> 'a -> 'a -> 'a
  direct \select : [(int -> bool); inline-text; inline-text] inline-cmd
  direct +select : [(int -> bool); block-text; block-text] block-cmd

  % 現在のレイヤー番号を描画する．
  direct \show-layer : [] inline-cmd

  % レイヤーの表示条件 (display-condition) を作成するのに便利な関数．
  val only: int -> int -> bool
  val elsewhen: int -> int -> bool
  val till: int -> int -> bool
  val after: int -> int -> bool
  val during: int -> int -> int -> bool
  val in-case: int list -> int -> bool

end = struct

  % Overlay 付きスライドにおけるレイヤー．
  let layer = SlydifiParam.make 0

  let-rec range n1 n2 =
    let-rec aux min max =
      if min == max  then [min] else min :: (aux (min + 1) max)
    in
    if n1 < n2 then (aux n1 n2) else (aux n2 n1)

  % itlst: layer の値に応じて異なる「発火」を行いたいような inline-text のリスト．
  % btlst: layer の値に応じて異なる「発火」を行いたいような block-text のリスト．
  % frame-f: itlst と btlst さえ与えられたらフレームが出来上がるような関数．
  let frame-scheme-overlay ctx n-layer frame-f itlst btlst =
    let () = SlydifiParam.discard layer in
    let func n =
      let () = layer |> SlydifiParam.set n in
      frame-f itlst btlst
    in
    range 1 n-layer |> List.map func |> List.fold-left (+++) block-nil

  let multiframe n-layer ctx layout content frame =
    let () = SlydifiParam.discard layer in
    let func n =
      let () = layer |> SlydifiParam.set n in
      frame |> Frame.to-page ctx layout content
    in
    range 1 n-layer |> List.map func |> List.fold-left (+++) block-nil


  let ghost-inline dcf ib =
    if (dcf (SlydifiParam.get layer)) then ib else inline-nil

  let ghost-block dcf bb =
    if (dcf (SlydifiParam.get layer)) then bb else block-nil

  let phantom-inline dcf ib =
    if (dcf (SlydifiParam.get layer)) then ib
    else
      let (wid, ht, dp) = get-natural-metrics ib in
      inline-graphics wid ht dp (fun (x, y) -> [])

  % TODO: paragraph-margin がつくような block-boxes
  % （今回は改ページがないので line-break + embed-block-top でいけるそうだが何故かうまくいかない）
  let phantom-block dcf bb =
    if (dcf (SlydifiParam.get layer)) then bb
    else
      let ht = get-natural-length bb in
      block-skip ht

  let select dcf val-true val-false =
    if (dcf (SlydifiParam.get layer)) then val-true else val-false

  let-inline \show-layer = embed-string (arabic (SlydifiParam.get layer))

  let-inline ctx \ghost dcf it = ghost-inline dcf (read-inline ctx it)
  let-block ctx +ghost dcf bt = ghost-block dcf (read-block ctx bt)

  let-inline ctx \phantom dcf it = phantom-inline dcf (read-inline ctx it)
  let-block ctx +phantom dcf bt = phantom-block dcf (read-block ctx bt)

  let-inline \select dcf it-true it-false = (select dcf it-true it-false)
  let-block +select dcf bt-true bt-false = (select dcf bt-true bt-false)

  let only n n-layer = (n-layer == n)
  let elsewhen n n-layer = not (n-layer == n)
  let till n n-layer = (n-layer <= n)
  let after n n-layer = (n-layer >= n)
  let during m n n-layer = (n-layer >= m) && (n-layer <= n)

  let in-case nlst n-layer =
    nlst |> List.map (fun n -> n-layer == n)
         |> List.fold-left ( || ) false


end
