@require: gr
@require: annot
@require: railway/railway
@require: base/color-ext
@require: base/int
@import: ../slydifi
@import: ../footnote
@require: enumitem/enumitem

module SlydifiThemeAkasaka: sig

  val layout: frame-layout

  val document: block-text -> document

% frames
  %% スライドマスター。
  val frame-master: unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-footer: unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  %% title: スライドのタイトル
  val frame-slide-title:
    ((| title: inline-text list; author: inline-text list; date: inline-text list|))
      Frame.frame
  %% セクションフレーム。
  % val frame-section-title: layout-slydifi-theme ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: ((| title: inline-text; inner: block-text |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; date: inline-text list|);] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +section : [inline-text list; block-text;] block-cmd
  direct +frame : [int?; inline-text; block-text;] block-cmd

% inline commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let page-num = SlydifiParam.make 0

  let layout = (|
    paper-width = 254mm;
    paper-height = 142.9mm;
    text-width = 254mm -' 60pt;
    text-height = 142.9mm -' 30pt;
    text-horizontal-margin = 30pt;
    text-vertical-margin = 10pt;
  |)

% configuration
  let config =
    let set-font-metrics fsize ctx =
      ctx |> set-font-size fsize
          |> set-paragraph-margin (fsize *' 0.6) (fsize *' 0.6)
          |> set-leading (fsize *' 1.4)
    in
    let default-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
    in
    let code-font ctx =
      ctx |> set-font Latin          (`lmmono`, 1.0, 0.0)
          |> set-font Kana           (`lmmono`, 1.0, 0.0)
          |> set-font HanIdeographic (`lmmono`, 1.0, 0.0)
    in
    let bold-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Bold`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
    in

    (|
      font = (|
        normal = [default-font; set-font-metrics 18pt];
        bold = [bold-font];
        code = [code-font];
        slide-title = [bold-font; set-font-metrics 36pt];
        slide-author = [default-font; set-font-metrics 24pt;];
        slide-date = [default-font; set-font-metrics 20pt;];
        section-title = [bold-font; set-font-metrics 28pt];
        frame-title = [bold-font; set-font-metrics 28pt];
        pagenum = [default-font; set-font-metrics 12pt;];
        footnote = [default-font; set-font-metrics 10.8pt; set-leading 14.4pt; set-paragraph-margin 6pt 6pt;];
      |);
      color = (|
        bg = Color.of-css `#EEEEEE`;
        fg = Color.of-css `#000000`;
        emph = Color.of-css `#ff0027`;
        % red = Color.of-css `#cc517a`;
        % green = Color.of-css `#668e3d`;
        link = Color.of-css `#2d539e`;

        title = Color.of-css `#555555`;
        separator = Color.of-css `#555555`;
        section-ribbon = Color.of-css `#aaaaaa`;
        section-ribbon-intersect = Color.of-css `#777777`;
      |);
      length = (|
        frame-title-height = 36pt;
        frame-title-left-margin = 10pt;
        frame-title-bot-margin = 10pt;
        frame-body-top-margin = 14pt;

        title-padding-lr = 12pt;  % タイトルの左右のパディング（紙面基準）
        title-padding-upper-line = 5pt;  % タイトルの下線とタイトル文字の間隔
        title-padding-lower-line = 0pt;  % タイトルの下線と本文の間隔
        title-line-width = 3pt;  % タイトルの下線とタイトル文字の間隔
      |)
    |)

  let-inline ctx \code code =
    let ctx =
      ctx |> SlydifiScheme.apply-font-cfg config#font#code
          |> set-text-color config#color#fg
    in
    let fsize = get-font-size ctx in

    script-guard Latin (read-inline ctx (embed-string code))

  let document bt =
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    let init-ctx ctx =
      ctx |> SlydifiScheme.apply-font-cfg config#font#normal
          |> set-text-color config#color#fg
          |> set-code-text-command (command \code)
    in
    SlydifiScheme.document-scheme layout init-ctx hookf bt

% frames

  let frame-master =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#paper-width, layout#paper-height)
          |> fill config#color#bg
      ])
    in
    Frame.make layout f

  let frame-master-with-footer =
    let f ctx () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      let pagenum = SlydifiParam.get page-num in
      let total = get-cross-reference `pagecount` |> Option.from `1` in

      let gr-page-number =
        let it-pagenum = pagenum |> arabic |> embed-string in
        let it-total = embed-string total in
        let ctx-pagenum = SlydifiScheme.apply-font-cfg config#font#pagenum ctx in
        let ib = read-inline ctx-pagenum {#it-pagenum;/#it-total;} in
        let (wid, _, dp) = get-natural-metrics ib in
        let x = layout#paper-width -' wid -' 10pt in
        let y = dp +' 12pt in
        [ draw-text (x, y) ib ]
      in

      (block-nil, [gr-frame-master; gr-page-number; ] |> List.concat)
    in
    Frame.make layout f

  let frame-slide-title =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      % 設定
      let relwid r = layout#paper-width *' r in
      let relht r = layout#paper-height *' r in
      let title-width = relwid 0.8 in
      let title-xmin = relwid 0.1 in
      let title-ymin = relht 0.45 in
      let title-mgn = 24pt in
      let date-ymax = relht 0.2 in

      let gr-bgs =
        [
          Gr.rectangle (0pt, title-ymin) (relwid 1.0, relht 1.0)
            |> fill config#color#title;
        ]
      in

      let gr-title =
        let ib =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#slide-title
            |> set-text-color config#color#bg
          in
          let bbf ctx =
            content#title |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-bottom ctx title-width bbf
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, title-ymin +' title-mgn) ib
      in

      let gr-author =
        let ib =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#slide-author
            |> set-text-color config#color#fg
          in
          let bbf ctx =
            content#author |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-top ctx title-width bbf
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, title-ymin -' title-mgn -' ht) ib
      in

      let gr-date =
        let ib =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#slide-date
            |> set-text-color config#color#fg
          in
          let bbf ctx =
            content#date |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-top ctx title-width bbf
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, date-ymax -' title-mgn -' ht) ib
      in

      (block-nil, [gr-frame-master; gr-bgs; [gr-title; gr-author; gr-date]] |> List.concat)

    in
    Frame.make layout f

  let frame-section-title =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      % 設定
      let relwid r = layout#paper-width *' r in
      let relht r = layout#paper-height *' r in
      let title-width = layout#paper-width *' 0.8 in
      let title-xmin = layout#paper-width *' 0.1 in
      let title-xmax = layout#paper-width *' 0.1 +' 5pt in
      let title-ymin = layout#paper-height *' 0.45 in
      let title-ymax = layout#paper-height *' 0.45 +' 5pt in
      let title-mgn = 24pt in
      let color-mirror = Color.of-css `#636983` in

      % タイトルのグラフィックス
      let gr-bgs =
        let north-rect = Gr.rectangle (title-xmin, title-ymax) (title-xmax, relht 1.00) in
        let south-rect = Gr.rectangle (title-xmin, title-ymin) (title-xmax, relht 0.00) in
        let east-rect  = Gr.rectangle (title-xmax, title-ymin) (relwid 1.00, title-ymax) in
        let west-rect  = Gr.rectangle (title-xmin, title-ymin) (relwid 0.00, title-ymax) in
        let cent-rect  = Gr.rectangle (title-xmin, title-ymin) (title-xmax, title-ymax) in

        [
          fill config#color#section-ribbon north-rect;
          fill config#color#section-ribbon south-rect;
          fill config#color#section-ribbon east-rect;
          fill config#color#section-ribbon west-rect;
          fill config#color#section-ribbon-intersect cent-rect;
        ]
      in

      let gr-titles =
        let bbs ctx =
          content#title |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ibf clr =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#section-title
            |> set-text-color clr
          in
          embed-block-bottom ctx title-width
          (fun ctx -> (bbs ctx |> List.fold-left (+++) block-nil))
        in
        let gr-title = draw-text (title-xmin +' title-mgn, title-ymin +' title-mgn) (ibf config#color#fg) in
        [
          gr-title;
        ]
      in

      (block-nil, [gr-frame-master; gr-bgs; gr-titles] |> List.concat)
    in
    Frame.make layout f

  let frame-normal =
    let f ctx content =
      % frame-master-with-footer の graphics list を踏襲する
      let (_, gr) = frame-master-with-footer |> Frame.embed ctx () in

      let title-ymin = layout#paper-height -' config#length#frame-title-height in

      let gr-separator =
        let xleft = config#length#frame-title-left-margin in
        let xright = layout#paper-width -' config#length#frame-title-left-margin in
        let y = title-ymin -' config#length#frame-title-bot-margin in
        [Gr.line (xleft, y) (xright, y) |> stroke 3pt config#color#separator]
      in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx
          |> SlydifiScheme.apply-font-cfg config#font#frame-title
        in
        let ib-title = read-inline ctx-title content#title in
        [draw-text (config#length#frame-title-left-margin, title-ymin) ib-title]
      in

      % 中身のブロックボックス列
      let bb-blank skip =
        line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-nil
      in
      let bb-inner =
        bb-blank (config#length#frame-title-height +' config#length#frame-body-top-margin)
          +++ (read-block ctx content#inner)
      in


      (bb-inner, [gr; gr-separator; gr-title] |> List.concat)

    in
    Frame.make layout f

% frame commands

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title)(1)(content);
    >

  let-block ctx +section title inner =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title)(1)(|title = title;|);
      #inner;
    >

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal)(n-frame)(|title = title; inner = inner|);
    >

% inline commands
  let-inline ctx \emph ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> SlydifiScheme.apply-font-cfg config#font#bold
            |> set-text-color config#color#emph
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \textbf ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (SlydifiScheme.apply-font-cfg config#font#bold ctx) ctx
    in
    read-inline ctx2 it

  let-inline ctx \link ?:text url =
    match text with
    | Some(text) ->
        let ctx =
          ctx |> set-text-color config#color#link
        in
        read-inline ctx {\href(url)(text);}
    | None ->
        let text = embed-string url in
        let ctx =
          ctx
            |> SlydifiScheme.apply-font-cfg config#font#code
            |> set-text-color config#color#link
        in
        read-inline ctx {\href(url)(text);}

% \footnote{} command

  let-inline ctx \footnotetext ref-label it =
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = SlydifiScheme.apply-font-cfg config#font#footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = SlydifiScheme.apply-font-cfg config#font#footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

end

let document = SlydifiThemeAkasaka.document

