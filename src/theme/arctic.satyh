%% This slide theme is heavily inspired by the iceberg.vim colorscheme.
%% [iceberg.vim](https://github.com/cocopon/iceberg.vim): Copyright (c) 2014 cocopon <cocopon@me.com>

@require: gr
@require: color
@require: code
@require: railway/railway
@import: ../slydifi
@import: ../footnote
@require: enumitem/enumitem

module SlydifiThemeArctic: sig

  val layout: frame-layout

  val document: block-text -> document

% frames
  %% スライドマスター。
  val frame-master: unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-footer: unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  %% title: スライドのタイトル
  val frame-slide-title:
    ((| title: inline-text list; author: inline-text list; date: inline-text list|))
    Frame.frame
  %% セクションフレーム。
  % val frame-section-title: layout-slydifi-theme ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: ((| title: inline-text; inner: block-text |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; date: inline-text list|);] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +section : [inline-text list; block-text;] block-cmd
  direct +frame : [int?; inline-text; block-text;] block-cmd

% inline commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let page-num = SlydifiParam.make 0

  let default-font-conf fsize ctx =
    ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0)
        |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
        |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
        |> set-text-color (Color.of-css `#161821`)
        |> set-font-size fsize
        |> set-paragraph-margin (fsize *' 0.65) (fsize *' 0.65)
        |> set-leading (fsize *' 1.4)
        |> set-code-text-command (command \code)

  let emph-font ctx =
    ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Bold`, 1.0, 0.0)
        |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
        |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)

  let layout = (|
    paper-width = 254mm;
    paper-height = 142.9mm;
    text-width = 254mm -' 40pt;
    text-height = 142.9mm -' 30pt;
    text-horizontal-margin = 20pt;
    text-vertical-margin = 10pt;
    bg-gr-start-point = -20pt;
    default-ctx = default-font-conf 20pt;
  |)

% configuration
  let config =
    let bg = Color.of-css `#c6c8d1` in
    let fg = Color.of-css `#161821` in
    % let emph = Color.of-css `#e27878` in
    let emph = Color.of-css `#cc4343` in

    (|
      font = (|
        emph = [set-text-color emph; emph-font];
        slide-title = [default-font-conf 32pt; emph-font];
        slide-author = [default-font-conf 24pt;];
        slide-date = [default-font-conf 20pt;];
        section-title = [default-font-conf 32pt; emph-font];
        frame-title = [default-font-conf 28pt; emph-font];
        pagenum = [default-font-conf 12pt;];
        footnote = [default-font-conf 10.8pt; set-leading 14.4pt; set-paragraph-margin 6pt 6pt;]
      |);
      color = (|
        bg = bg;
        fg = fg;
        bg-slide-author = Color.of-css `#1e2132`;
        title-inv-iceberg = Color.of-css `#6b7089`;
      |);
      length = (|
        frame-title-height = 36pt;
        frame-title-left-margin = 10pt;
      |)
    |)

  let document bt =
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    SlydifiScheme.document-scheme layout hookf bt

% frames

  let frame-master =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#paper-width, layout#paper-height)
          |> fill config#color#bg
      ])
    in
    Frame.make layout f

  let frame-master-with-footer =
    let f ctx () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      let gr-page-number =
        let it-pagenum = SlydifiParam.get page-num |> arabic |> embed-string in
        let it-total = get-cross-reference `pagecount` |> Option.from ` ` |> embed-string in
        let ctx-pagenum = apply-font-cfg config#font#pagenum ctx in
        let ib = read-inline ctx-pagenum {#it-pagenum;/#it-total;} in
        let (wid, _, dp) = get-natural-metrics ib in
        let x = layout#paper-width -' wid -' 10pt in
        let y = dp +' 10pt in
        [ draw-text (x, y) ib ]
      in

      (block-nil, [gr-frame-master; gr-page-number] |> List.concat)
    in
    Frame.make layout f

  let frame-slide-title =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      % 設定
      let relwid r = layout#paper-width *' r in
      let relht r = layout#paper-height *' r in
      let title-width = relwid 0.75 in
      let title-xmin = relwid 0.08 in
      let title-ymin = relht 0.5 in
      let date-ymax = relht 0.2 in
      let title-mgn = 24pt in

      let gr-bgs =
        let iceberg = Rail.(init
          |> push-line (20pt, 20pt)
          |> push-line (10pt, -10pt)
          |> push-line (40pt, 40pt)
          |> push-line (50pt, -50pt)
        )
        in
        let inv-iceberg = Rail.(iceberg |> reflect-x |> reflect-y |> reverse) in
        [
          Gr.rectangle (0pt, 0pt) (relwid 1.0, relht 0.6) |> fill config#color#bg-slide-author;
          Gr.rectangle (0pt, relht 0.5) (relwid 1.0, relht 1.0) |> fill config#color#fg;
          iceberg |> Rail.to-loop (630pt, relht 0.5) |> fill config#color#bg;
          inv-iceberg |> Rail.to-loop (630pt, relht 0.5) |> fill config#color#title-inv-iceberg;
        ]
      in

      % タイトルのグラフィックス
      let gr-title =
        let bbs ctx =
          content#title |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib =
          let ctx = ctx
            |> apply-font-cfg config#font#slide-title
            |> set-text-color config#color#bg
          in
          embed-block-bottom ctx title-width
          (fun ctx -> (bbs ctx |> List.fold-left (+++) block-nil))
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, title-ymin +' title-mgn) ib
      in

      % 著者名のグラフィックス
      let gr-author =
        let bbs ctx =
          content#author |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib =
          let ctx = ctx
            |> apply-font-cfg config#font#slide-author
            |> set-text-color config#color#bg
          in
          embed-block-top ctx title-width
          (fun ctx -> (bbs ctx |> List.fold-left (+++) block-nil))
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, title-ymin -' title-mgn -' ht) ib
      in
      let (_, gr) = frame-master |> Frame.embed ctx () in

      % 日付のグラフィックス
      let gr-date =
        let bbs ctx =
          content#date |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib =
          let ctx = ctx
            |> apply-font-cfg config#font#slide-date
            |> set-text-color config#color#bg
          in
          embed-block-top ctx title-width
          (fun ctx -> (bbs ctx |> List.fold-left (+++) block-nil))
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, date-ymax -' title-mgn -' ht) ib
      in
      let (_, gr) = frame-master |> Frame.embed ctx () in

      (block-nil, [gr-frame-master; gr-bgs; [gr-title; gr-author; gr-date]] |> List.concat)
    in
    Frame.make layout f

  let frame-section-title =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      % 設定
      let relwid r = layout#paper-width *' r in
      let relht r = layout#paper-height *' r in
      let title-width = layout#paper-width *' 0.8 in
      let title-xmin = layout#paper-width *' 0.1 in
      let title-ymin = layout#paper-height *' 0.45 in
      let date-ymax = layout#paper-height *' 0.2 in
      let title-mgn = 24pt in
      let color-mirror = Color.of-css `#636881` in

      % タイトルのグラフィックス
      let gr-bgs =
        let iceberg = Rail.(init
          |> push-line (20pt, 20pt)
          |> push-line (10pt, -10pt)
          |> push-line (40pt, 40pt)
          |> push-line (50pt, -50pt)
        )
        in
        let inv-iceberg = Rail.(iceberg |> reflect-y) in
        [
          Gr.rectangle (0pt, 0pt) (relwid 1.0, title-ymin) |> fill config#color#title-inv-iceberg;
          iceberg |> Rail.to-loop (630pt, title-ymin) |> fill config#color#fg;
          inv-iceberg |> Rail.to-loop (630pt, title-ymin) |> fill color-mirror;
        ]
      in
      let gr-titles =
        let bbs ctx =
          content#title |> List.map (fun it ->
            line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
        in
        let ibf clr =
          let ctx = ctx
            |> apply-font-cfg config#font#section-title
            |> set-text-color clr
          in
          embed-block-bottom ctx title-width
          (fun ctx -> (bbs ctx |> List.fold-left (+++) block-nil))
        in
        let gr-title = draw-text (title-xmin, title-ymin +' title-mgn) (ibf config#color#fg) in
        let gr-title-inv =
          draw-text (0pt, 0pt) (ibf color-mirror)
            |> linear-transform-graphics 1. 0. 0. (0. -. 1.)
            |> shift-graphics (title-xmin, title-ymin -' title-mgn)
        in
        [
          gr-title;
          gr-title-inv;
        ]
      in

      (block-nil, [gr-frame-master; gr-bgs; gr-titles] |> List.concat)
    in
    Frame.make layout f

  let frame-normal =
    let f ctx content =
      % frame-master-with-footer の graphics list を踏襲する
      let (_, gr) = frame-master-with-footer |> Frame.embed ctx () in

      let title-ymin = layout#paper-height -' config#length#frame-title-height in

      let gr-separator =
        []
      in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx
          |> apply-font-cfg config#font#frame-title
          |> set-paragraph-margin 0pt 20pt
        in
        let ib-title = read-inline ctx-title content#title in
        [draw-text (config#length#frame-title-left-margin, title-ymin) ib-title]
      in

      % 中身のブロックボックス列
      let bb-blank skip =
        line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-nil
      in
      let bb-inner = bb-blank 48pt +++ (read-block ctx content#inner) in


      (bb-inner, [gr; gr-separator; gr-title] |> List.concat)

    in
    Frame.make layout f

% frame commands

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title)(1)(content);
    >

  let-block ctx +section title inner =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title)(1)(|title = title;|);
      #inner;
    >

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal)(n-frame)(|title = title; inner = inner|);
    >

% inline commands
  let-inline ctx \emph ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select dcf (apply-font-cfg config#font#emph ctx) ctx
    in
    read-inline ctx2 it

% \footnote{} command

  let-inline ctx \footnotetext ref-label it =
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = apply-font-cfg config#font#footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = apply-font-cfg config#font#footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

end

let document = SlydifiThemeArctic.document
