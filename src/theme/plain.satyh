@require: gr
@require: color
@import: ../slydifi


type layout-slydifi-theme = (|
  %% すべてのテーマに必須なレコード。
  base: basic-layout;
  %% フォント設定。
  font: (|
    normal: font-config;
    emph: font-config;
    slide-title: font-config;
    slide-author: font-config;
    slide-date: font-config;
    frame-title: font-config;
    footnote: font-config;
  |)
|)

module SlydifiThemePlain: sig

  val default-layout: layout-slydifi-theme

  val document: block-text -> document

% frames
  %% スライドマスター。
  val frame-master: layout-slydifi-theme unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-pagenum: layout-slydifi-theme unit Frame.frame
  %% スライド全体のタイトルフレーム。
  val frame-slide-title: layout-slydifi-theme ((| title: inline-text list; |)) Frame.frame
  %% セクションフレーム。
  % val frame-section-title: layout-slydifi-theme ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: layout-slydifi-theme ((| title: inline-text; inner: block-text |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list;|);] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +frame : [int?; inline-text; block-text;] block-cmd

end = struct

  let page-num = SlydifiParam.make 0

  let default-layout =
    let default-font-conf fsize ctx =
      ctx |> set-font Latin          (`lmsans`, 1.0, 0.0)
          |> set-font Kana           (`ipaexg`, 1.0, 0.0)
          |> set-font HanIdeographic (`ipaexg`, 1.0, 0.0)
          |> set-font-size fsize
          |> set-paragraph-margin (fsize *' 0.65) (fsize *' 0.65)
          |> set-leading (fsize *' 1.4)
    in
    (|
      base = (|
        paper-width = 254mm;
        paper-height = 142.9mm;
        text-width = 254mm -' 40pt;
        text-height = 142.9mm -' 30pt;
        text-horizontal-margin = 20pt;
        text-vertical-margin = 10pt;
        bg-gr-start-point = 0pt;
      |);
       font = (|
        normal = [default-font-conf 20pt;];
        emph = [set-text-color Color.red;];
        slide-title = [default-font-conf 36pt;];
        slide-author = [default-font-conf 24pt;];
        slide-date = [default-font-conf 20pt;];
        frame-title = [default-font-conf 28pt;];
        footnote = [default-font-conf 12pt;];
       |);
    |)

  let document bt =
    let hookf _ _ = 
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    SlydifiScheme.document-scheme default-layout hookf bt

  let frame-master =
    let f ctx layout () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#base#paper-width, layout#base#paper-height)
          |> fill (Color.gray 0.85)
      ])
    in
    Frame.make f

  let frame-master-with-pagenum =
    let f ctx layout () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx layout () in

      let gr-page-number =
        let it-pagenum = SlydifiParam.get page-num |> arabic |> embed-string in
        let it-total = get-cross-reference `pagecount` |> Option.from ` ` |> embed-string in
        let ctx-pagenum = apply-font-cfg layout#font#footnote ctx in
        let ib = read-inline ctx-pagenum {#it-pagenum;/#it-total;} in
        let (wid, _, dp) = get-natural-metrics ib in
        let x = layout#base#paper-width -' wid -' 10pt in
        let y = dp +' 10pt in
        [ draw-text (x, y) ib ]
      in

      (block-nil, [gr-frame-master; gr-page-number] |> List.concat)
    in
    Frame.make f

  let frame-slide-title =
    let f ctx layout content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx layout () in

      let ctx-title = ctx |> apply-font-cfg layout#font#slide-title in
      let title = content#title in

      let gr-title =
        let bbs-title ctx =
          content#title |> List.map (fun it ->
            line-break true true ctx ((read-inline ctx it) ++ inline-fil))
        in
        let ib-title = embed-block-top ctx-title (layout#base#text-width)
          (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
        in
        draw-text (100pt +' 20pt, 100pt +' 20pt) ib-title
      in
      let (_, gr) = frame-master |> Frame.embed ctx layout () in

      (block-nil, [gr-frame-master; [gr-title]] |> List.concat)
    in
    Frame.make f

  let frame-normal =
    let f ctx layout content =
      % frame-master-with-pagenum の graphics list を踏襲する
      let (_, gr) = frame-master-with-pagenum |> Frame.embed ctx layout () in

      let title = content#title in
      let inner = content#inner in
      let bb = read-block (apply-font-cfg layout#font#normal ctx) inner in

      (bb, gr)

    in
    Frame.make f

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title)(default-layout)(1)(content);
    >

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal)(default-layout)(n-frame)(|title = title; inner = inner|);
    >

end

let document = SlydifiThemePlain.document
