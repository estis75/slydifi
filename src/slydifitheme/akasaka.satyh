% vim: foldmethod=marker
@require: gr
@require: math
@require: list
@require: annot
@import: ../slydifi
@import: ../functions/color
@import: ../functions/enumitem
@import: ../functions/footnote

module SlydifiAkasaka : sig

  % Signature {{{
  val document: 'a -> block-text -> document
    constraint 'a :: (|
      draft-mode: bool;
      header-text: inline-text;
    |)

  direct +section : [inline-text list; block-text] block-cmd
  direct +frame : [inline-text; block-text] block-cmd
  direct +frame-nt : [block-text] block-cmd
  direct \emph : [inline-text] inline-cmd
  direct \textbf : [inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct +listing : [itemize] block-cmd
  direct +make-title : [block-text] block-cmd
  direct +title: [inline-text list] block-cmd
  direct +author: [inline-text list] block-cmd
  direct +date: [inline-text list] block-cmd
  direct \fig-right : [imginfo] inline-cmd
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

  % }}}

end = struct

  % 文書設定 {{{
  % PowerPoint の文書サイズ (16:9) に合わせる
  let cfg-paper = (|
    width = 25.4cm;
    height = 14.29cm;
  |)
  % let cfg-paper = (|
  %   width = 12.8cm
  %   height = 9.6cm
  % |)

  let cfg-text-normal = (|
    size = 18pt;
    font-latin = (`NotoSans-R`     , 1.0, 0.0);
    font-cjk   = (`NotoSansCJKjp-R`, 1.0, 0.0);
  |)
  let cfg-text-emph = (|
    size = 18pt;
    font-latin = (`NotoSans-B`     , 1.0, 0.0);
    font-cjk   = (`NotoSansCJKjp-B`, 1.0, 0.0);
  |)
  let cfg-text = (|
    normal = cfg-text-normal;
    frame-title = (| cfg-text-emph with size = 28pt; |);
    header = (| cfg-text-normal with size = 12pt; |);
    footer = (| cfg-text-normal with size = 12pt; |);
    slide-title = (| cfg-text-emph with size = 36pt; |);
    slide-author = (| cfg-text-emph with size = 24pt; |);
    slide-date = (| cfg-text-emph with size = 24pt; |);
    slide-institute = (| cfg-text-normal with size = 20pt; |);
    section-title = (| cfg-text-emph with size = 28pt; |);
    footnote = (| cfg-text-normal with size = 12pt; |);
    mono = (|
      size = 18pt;
      font-latin = (`HackNerd-R`, 1.0, 0.0);
      font-cjk   = (`HackNerd-R`, 1.0, 0.0);
    |);
  |)

  let cfg-spacing = (|
    header-height = 24pt;
    footer-height = 24pt;
    text-horizontal-margin = 30pt;
    text-vertical-margin = 10pt;
    text-height = cfg-paper#height -' cfg-text#normal#size *' 2.;
    text-width  = cfg-paper#width -' 30pt *' 2.;
    main-grid   = 50pt;
    sub-grid    = 10pt;
    bg-gr-start-point = 0pt;
    title-padding-lr = 12pt;  % 左右のパディング（紙面基準）
    title-padding-upper-line = 5pt;  % タイトルの下線とタイトル文字の間隔
    title-padding-lower-line = 0pt;  % タイトルの下線と本文の間隔
    title-line-width = 3pt;  % タイトルの下線とタイトル文字の間隔
  |)

  let color-bg = SlydifiColor.html-color 0xCCCCCC
  let color-fg = SlydifiColor.html-color 0x000000
  let cfg-color = (|
    bg        = color-bg;
    fg        = color-fg;
    title     = SlydifiColor.html-color 0x555555;
    emph      = SlydifiColor.html-color 0xFF0027;
    link      = SlydifiColor.html-color 0x8F3F71;
    header    = SlydifiColor.inner-color color-bg color-fg 0.5;
    footer    = SlydifiColor.inner-color color-bg color-fg 0.5;
    main-grid = SlydifiColor.inner-color color-bg color-fg 0.7;
    sub-grid  = SlydifiColor.inner-color color-bg color-fg 0.9;
  |)

  let relwid relx = cfg-paper#width *' relx
  let relht rely = cfg-paper#height *' rely
  let relpt relx rely = (relwid relx, relht rely)

  let ctx-doc wid = SlydifiScheme.get-standard-context cfg-text cfg-color wid

  let-mutable is-first-page <- true

  % }}}

  % document command {{{
  let document record inner=

    let header pbinfo =
      let ctx = ctx-doc cfg-paper#width
        |> SlydifiScheme.set-font-config cfg-text#header
        |> set-text-color cfg-color#emph
      in
      let ib-top = read-inline ctx record#header-text in
      let (wid-top, ht-top, dp-top) = get-natural-metrics ib-top in
      let margin = 3pt in
      let ib = inline-graphics (wid-top +' margin *' 2.0) (ht-top +' margin *' 2.0) (dp-top +' margin *' 2.0) (fun (x, y) -> [
        (fill Color.white (
          Gr.rectangle (x -' margin, y -' margin)
            (x +' wid-top +' margin, y +' ht-top +' margin)));
            (draw-text (x, y) ib-top)  % x, y に関わらず point の絶対座標で決める
      ])
      in
      line-break true true ctx (inline-fil ++ ib ++ (inline-skip 3pt))
    in

    let footer pbinfo =
      let ctx = ctx-doc cfg-paper#width
        |> SlydifiScheme.set-font-config cfg-text#footer
        |> set-text-color cfg-color#footer
      in
      let it-pageno = embed-string (arabic pbinfo#page-number) in
      let it-count = match get-cross-reference `pagecount` with
        | None -> {??}
        | Some(i) -> embed-string i
      in
      line-break true true ctx (inline-fil ++ (read-inline ctx {#it-pageno;/#it-count;}) ++ inline-skip 20pt)
    in

    SlydifiScheme.document-scheme cfg-paper cfg-text cfg-color cfg-spacing header footer record inner

  % }}}

  % common function in slides {{{
  let-rec range n1 n2 =
    let-rec aux min max =
      if min == max  then [min] else min :: (aux (min + 1) max)
    in
    if n1 < n2 then (aux n1 n2) else (aux n2 n1)

  let ib-bg =
    let rect-bg =
      fill cfg-color#bg (Gr.rectangle (0pt, 0pt) (cfg-paper#width, cfg-paper#height))
    in
    inline-graphics 0pt 0pt 0pt (fun _ -> [rect-bg])

  let bg-grids grid-wid grid-ht grid-color =
    let n-grid-vertical   = round(cfg-paper#width  /' grid-wid) in
    let n-grid-horizontal = round(cfg-paper#height /' grid-ht)  in
    let vlines =
      List.map (
        fun n -> Gr.line (grid-wid *' float(n), 0pt) (grid-wid *' float(n), cfg-paper#height)
      ) (range 1 n-grid-vertical) in
      % [Gr.line (grid-wid, 0pt) (grid-wid, cfg-paper#height)] in
    let hlines =
      List.map (
        fun n -> Gr.line (0pt, grid-ht *' float(n)) (cfg-paper#width, grid-ht *' float(n))
      ) (range 1 n-grid-horizontal) in
    % let hlines = [Gr.line (0pt, grid-ht) (cfg-paper#width, grid-ht)] in
    let lines = List.append vlines hlines in
    let grid = List.map (stroke 1pt grid-color) lines in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> grid) in
    ib

  let make-grids dmode =
    let main-grid = bg-grids cfg-spacing#main-grid cfg-spacing#main-grid cfg-color#main-grid in
    let sub-grid = bg-grids cfg-spacing#sub-grid cfg-spacing#sub-grid cfg-color#sub-grid in
    if dmode then (sub-grid ++ main-grid) else inline-nil

  let bb-bg ctx dmode =
    let ctx-phantom =
      ctx |> set-font-size 0pt
          |> set-paragraph-margin 0pt 0pt
          |> set-leading 0pt
    in
    (line-break true true ctx-phantom (ib-bg ++ (make-grids dmode) ++ inline-fil))


  % }}}

  % +make-title{} command {{{

  % title config
  % 消す予定
  let title-xmax = relwid 0.1
  let title-ymax = relht 0.45

  let title-xmin = relwid 0.1
  let title-ymin = relht 0.45
  let title-width = relwid 0.8
  let author-width = relwid 0.8
  let date-ymin = relht 0.2
  let title-mgn = 24pt

  let put-text point align ib =
    let (w, h, d) = get-natural-metrics ib in
    % xalgin: 0. で左揃え，0.5 で中央揃え，1. で右揃え
    % yalgin: 0. で下揃え，0.5 で中央揃え，1. で上揃え
    let (xalign, yalign) = align in
    let (pointx, pointy) = point in
    let xpos = pointx -' w *' xalign in
    let ypos = pointy +' d -' (h +' d) *' yalign in
    draw-text (xpos, ypos) ib  % x, y に関わらず point の絶対座標で決める
  % inline-graphics wid ht 0pt (fn)

  % +make-title の中で使う
  let-block ctx +title its-title =
    let ctx-title = ctx |> SlydifiScheme.set-font-config cfg-text#slide-title
                        |> set-text-color cfg-color#bg
    in
    let l = get-font-size ctx-title *' 0.65 in
    let bbs-title ctx =
      its-title |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (inline-fil ++ (read-inline ctx it) ++ inline-fil))
    in
    let ib-title = embed-block-top ctx-title title-width
      (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
    in
    let draw-title =
      [(put-text (title-xmin, title-ymin +' title-mgn)
        (0., 0.) ib-title);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-title) in
    (line-break true false ctx (ib ++ inline-fil))

  % +make-title の中で使う
  let-block ctx +author its-author =
    let ctx-author = ctx |> SlydifiScheme.set-font-config cfg-text#slide-author
                        |> set-text-color cfg-color#title
    in
    let l = get-font-size ctx-author *' 0.65 in
    let bbs-author ctx =
      its-author |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (inline-fil ++ (read-inline ctx it) ++ inline-fil))
    in
    let ib-author = embed-block-top ctx-author author-width
      (fun ctx -> (bbs-author ctx |> List.fold-left (+++) block-nil))
    in
    let draw-author =
      [(put-text (title-xmin, title-ymin -' title-mgn)
        (0., 1.) ib-author);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-author) in
    (line-break true false ctx (ib ++ inline-fil))

  % +make-title の中で使う
  let-block ctx +date its-date =
    let ctx-date = ctx |> SlydifiScheme.set-font-config cfg-text#slide-date
                       |> set-text-color cfg-color#title
    in
    let l = get-font-size ctx-date *' 0.25 in
    let bbs-date ctx =
      its-date |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (inline-fil ++ (read-inline ctx it) ++ inline-fil))
    in
    let ib-date = embed-block-top ctx-date author-width
      (fun ctx -> (bbs-date ctx |> List.fold-left (+++) block-nil))
    in
    let draw-date =
      [(put-text (title-xmin, date-ymin -' title-mgn)
        (0., 1.) ib-date);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-date) in
    (line-break true false ctx (ib ++ inline-fil))

  let-block ctx +make-title bt-inner =
    let whole-rect = Gr.rectangle (relwid 0.0, title-ymin) (relwid 1.0, relht 1.00) in

    let draw-titleframe =
      [
        (fill cfg-color#title whole-rect);
      ]
    in
    let ib =
      inline-graphics 0pt 0pt 0pt (fun _ -> draw-titleframe)
    in
    SlydifiScheme.clear-page-or-nil is-first-page +++
    (bb-bg ctx !draft-mode) +++ (line-break true false ctx (ib ++ inline-fil))
      +++ (read-block ctx bt-inner)

  % }}}

  % +frame{}<> command {{{

  let placeholder height (origX, origY) =
    [fill Color.white (Gr.rectangle (origX, origY) (origX, origY +' height))]

  let make-placeholder ctx glue-height =
    let ht = length-max 0pt glue-height in
    let ctx2 = ctx |> set-paragraph-margin 0pt 0pt in
    line-break true false ctx2 (inline-graphics 0pt ht 0pt (placeholder ht) ++ inline-fil)

  let-block ctx +frame title inner =

    let deco (x, y) wid hgt dpt =
      let path1 =
        let xL = x -' cfg-spacing#text-horizontal-margin +' cfg-spacing#title-padding-lr in
        let yB = y in
        let xR = xL +' cfg-paper#width -' cfg-spacing#title-padding-lr *' 2.0 in
        let yT = yB +' cfg-spacing#title-line-width in
        Gr.rectangle (xL, yT) (xR, yB)
      in
      [ (fill cfg-color#title path1); ]
    in

    let bb-title =
      let ctx-title = ctx
        |> SlydifiScheme.set-font-config cfg-text#frame-title
        |> set-text-color cfg-color#title
        |> set-paragraph-margin 0pt cfg-spacing#title-padding-lower-line in
      let ib-title = read-inline ctx-title title in
      block-frame-breakable ctx-title
          (
            cfg-spacing#title-padding-lr -' cfg-spacing#text-horizontal-margin,
            cfg-spacing#title-padding-lr,
            0pt,
            cfg-spacing#title-padding-upper-line +' cfg-spacing#title-line-width
          )
            (deco, deco, deco, deco)
              (fun ctx ->
                line-break true true ctx (ib-title ++ inline-fil)
              )
    in

    let bg-graphics = [] in
    let ht = cfg-spacing#text-height -' (get-natural-length bb-title) in
    let bb-inner = read-block ctx inner in

    SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page bg-graphics
      ctx (bb-title +++ bb-inner)

  let-block ctx +frame-nt inner =
    let bg-graphics = [] in
    let bb-inner = read-block ctx inner in
    SlydifiScheme.frame-scheme cfg-paper cfg-color cfg-spacing is-first-page bg-graphics ctx bb-inner

  % }}}

  % 文書構造 {{{

  let section-title ctx its-title =
    let ctx-title = ctx |> SlydifiScheme.set-font-config cfg-text#section-title
                        |> set-text-color cfg-color#title
    in
    let l = get-font-size ctx-title *' 0.5 in
    let bbs-title ctx =
      its-title |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-title = embed-block-top ctx-title title-width
      (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
    in
    let draw-title =
      [(put-text (title-xmax +' title-mgn, title-ymax +' title-mgn)
        (0., 0.) ib-title);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-title) in
    (line-break true false ctx (ib ++ inline-fil))

  let-block ctx +section its bt =
    let sec-title-xmin = title-xmin in
    let sec-title-ymin = title-ymin in
    let sec-title-xmax = title-xmin +' 5pt in
    let sec-title-ymax = title-ymin +' 5pt in
    let north-rect = Gr.rectangle (sec-title-xmin, sec-title-ymax) (sec-title-xmax, relht 1.00) in
    let south-rect = Gr.rectangle (sec-title-xmin, sec-title-ymin) (sec-title-xmax, relht 0.00) in
    let east-rect  = Gr.rectangle (sec-title-xmax, sec-title-ymin) (relwid 1.00, sec-title-ymax) in
    let west-rect  = Gr.rectangle (sec-title-xmin, sec-title-ymin) (relwid 0.00, sec-title-ymax) in
    let cent-rect  = Gr.rectangle (sec-title-xmin, sec-title-ymin) (sec-title-xmax, sec-title-ymax) in
    let rect-color = SlydifiColor.inner-color cfg-color#title cfg-color#bg 0.4 in
    let draw-titleframe =
      [
        (fill rect-color north-rect);
        (fill rect-color south-rect);
        (fill rect-color east-rect);
        (fill rect-color west-rect);
        (fill cfg-color#title cent-rect);
      ]
    in
    let ib =
      inline-graphics 0pt 0pt 0pt (fun _ -> draw-titleframe)
    in
    SlydifiScheme.clear-page-or-nil is-first-page +++
    (bb-bg ctx !draft-mode) +++ (line-break true false ctx (ib ++ inline-fil))
      +++ (section-title ctx its) +++ (read-block ctx bt)


  % }}}

  % インラインテキスト装飾 {{{

  let-inline ctx \emph it =
    let ctx2 = ctx |> set-text-color cfg-color#emph
                   |> SlydifiScheme.set-font-config cfg-text#normal
    in
    (read-inline ctx2 it)

  let-inline ctx \textbf it =
    let ctx2 = ctx |> SlydifiScheme.set-font-config cfg-text#normal in
    (read-inline ctx2 it)

  let-inline ctx \link ?:it url =
    SlydifiScheme.ic-link cfg-color cfg-text ctx it url

  % }}}

  % 画像追加 {{{

  let-inline ctx \fig-right =
    SlydifiScheme.fig-right cfg-paper#width cfg-spacing#text-horizontal-margin ctx

  % }}}

  % +listing{} command {{{

  let label-dia ctx idx =
    let path (x, y) =
      let yc = y +' cfg-text#normal#size *' 0.3 in
      let north = yc +' cfg-text#normal#size *' 0.25 in
      let east  = x  +' cfg-text#normal#size *' 0.25 in
      let south = yc -' cfg-text#normal#size *' 0.25 in
      let west  = x  -' cfg-text#normal#size *' 0.25 in
      start-path (x, north)
        |> line-to (east, yc)
        |> line-to (x, south)
        |> line-to (west, yc)
        |> close-with-line
    in
    let gr (x, y) = [fill cfg-color#title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-tria ctx idx =
    let path (x, y) =
      let yc = y +' cfg-text#normal#size *' 0.3 in
      let xl = x in
      let xr = x +' cfg-text#normal#size *' 0.4 in
      let yu = yc +' cfg-text#normal#size *' 0.2 in
      let yd = yc -' cfg-text#normal#size *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill cfg-color#title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-circ ctx idx =
    let path (x, y) =
      let cx = x +' cfg-text#normal#size *' 0.3 in
      let cy = y +' cfg-text#normal#size *' 0.3 in
      let r = cfg-text#normal#size *' 0.15 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill cfg-color#title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-rule depth =
    match depth with
    | 0 -> label-dia
    | 1 -> label-tria
    | _ -> label-circ

  let-block +listing item = '< +genlistings(label-rule)(item); >

  % }}}

  % \footnote{} command {{{

  let-inline ctx \footnotetext ref-label it =
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (cfg-text#footnote#size *' 0.9)
            |> set-leading (cfg-text#footnote#size *' 1.2)
            |> set-paragraph-margin (cfg-text#footnote#size *' 0.5) (cfg-text#footnote#size *' 0.5)
          %temporary
      in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (cfg-text#footnote#size *' 0.9)
            |> set-leading (cfg-text#footnote#size *' 1.2)
            |> set-paragraph-margin (cfg-text#footnote#size *' 0.5) (cfg-text#footnote#size *' 0.5)
          %temporary
      in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

  % }}}

end




