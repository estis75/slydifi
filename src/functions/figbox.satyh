@require: list
@require: gr
@require: option
@require: color
@import: overlay

module FigBox : sig

  % context を与えて "箱" になるもの．
  type t

  % FigBox.t の新規作成
  val include-image : int?-> length -> string -> t
  val include-image-with-height : int?-> length -> string -> t
  val dummy-box: length ?-> length -> length -> t
  val textbox: (context -> context)?-> inline-text -> t
  val textbox-with-width: (context -> context)?-> length -> inline-text -> t
  val textblock: (context -> context)?-> length -> block-text -> t

  % FigBox.t の変換
  val hconcat : float?-> t list -> t
  val vconcat : float?-> t list -> t
  val margin : length -> length -> length -> length -> t -> t
  val hmargin : length -> t -> t
  val vmargin : length -> t -> t
  val hvmargin : length -> t -> t
  val draft: t -> t
  val shift: length -> length -> t -> t
  val gap: length -> t
  val sep: length?-> color?-> length -> t
  val glass-box: (float * float)?-> length -> length -> t -> t
  val frame: length -> color -> t -> t
  val bgcolor: color -> t -> t

  % overlay
  val ghost: (int -> bool) -> t -> t
  val phantom: (int -> bool) -> t -> t
  val select: (int -> bool) -> t -> t -> t

  % align
  val align-left : float
  val align-center : float
  val align-right : float
  val align-top : float
  val align-bottom : float

  direct +fig-center : [t] block-cmd
  direct +fig-block : [float?; t] block-cmd
  % direct \fig-on-right : [t] inline-cmd
  direct +fig-on-right : [length?; t; block-text] block-cmd
  direct +fig-on-left : [length?; t; block-text] block-cmd
  direct \fig-abs-pos : [(length * length); t] inline-cmd
  direct +fig-abs-pos : [(length * length); t] block-cmd

  direct \fig-inline : [float?; t] inline-cmd

end = struct

  type t =
    | Box of context -> inline-boxes
    | AxisDependingBox of bool -> context -> inline-boxes

  % FigBox.t を inline-boxes 型に変換する．
  % embe-math みたいな interface にしたかった．
  let embed-figure ctx fb =
    match fb with
      | Box(embedf) -> embedf ctx
      | AxisDependingBox(embedf) -> inline-nil

  let embed-gap is-horizontal ctx fb =
    match fb with
      | Box(embedf) -> embedf ctx
      | AxisDependingBox(embedf) -> embedf is-horizontal ctx

  % 定数

  let align-left   = 0.0
  let align-right  = 1.0
  let align-center = 0.5
  let align-top    = 1.0
  let align-bottom = 0.0

  % FigBox.t 型の新規作成 {{{

  % ユーザが画像を読み込むときに使える統一的な関数．
  % 拡張子を判別してヴァリアントを変える．
  let include-image ?:pg wid pth =
    let embedf ctx =
      let pg = Option.from 1 pg in
      let sep-pat = regexp-of-string `\.` in
      let splitlst = (split-on-regexp sep-pat pth) in
      let (_, ext) = Option.from (0, ` `) (splitlst |> List.nth (List.length splitlst - 1)) in
      match ext with
      | `pdf`  -> use-image-by-width (load-pdf-image pth pg) wid
      | `jpg`  -> use-image-by-width (load-image pth) wid
      | `jpeg` -> use-image-by-width (load-image pth) wid
      | `jpe`  -> use-image-by-width (load-image pth) wid
      | `jfif` -> use-image-by-width (load-image pth) wid
      | `jfi`  -> use-image-by-width (load-image pth) wid
      | `jif`  -> use-image-by-width (load-image pth) wid
      | _ ->
          let () = display-message (`Failed to include image: [` ^ pth ^ `]`) in
          inline-nil
    in
    Box(embedf)

  let include-image-with-height ?:pg ht pth =
    let embedf ctx = 
      let pg = Option.from 1 pg in
      let ib = embed-figure ctx (include-image ?:pg 1pt pth) in
      let (_, ht-norm, _) = get-natural-metrics ib in
      let scale = ht /' ht-norm in
      embed-figure ctx (include-image ?:pg (1pt *' scale) pth)
    in
    Box(embedf)

  % 小数点第二位まで表示
  let show-length len =
    let times-100 = round ((len /' 1pt) *. 100.) in
    let exp = (float times-100) /. 100. in
    embed-string (show-float exp ^ `pt`)

  let draw-dummy-box ctx wid ht dp (x, y) =
    let ctx = ctx |> set-font-size ((get-font-size ctx) *' 0.4) in
    let ib-wid = read-inline ctx (show-length wid) in
    let (wid-ib-wid, _, _) = get-natural-metrics ib-wid in
    let ib-ht = read-inline ctx (show-length (ht +' dp)) in
    let (_, ht-ib-ht, _) = get-natural-metrics ib-ht in
    let rect-path = Gr.rectangle (x, y -' dp) (x +' wid, y +' ht) in
    [
      (stroke 1pt Color.black rect-path);
      (stroke 1pt Color.black (Gr.line (0pt, 0pt -' dp) (wid, ht) |> shift-path (x, y)));
      (stroke 1pt Color.black (Gr.line (wid, 0pt -' dp) (0pt, ht) |> shift-path (x, y)));
      (draw-text (x +' 2pt, y +' (ht -' dp -' ht-ib-ht) *' 0.5) ib-ht);
      (draw-text (x +' (wid -' wid-ib-wid) *' 0.5, y -' dp +' 2pt) ib-wid);
    ]

  let dummy-box ?:dp wid ht =
    let embedf ctx =
      let dp = Option.from 0pt dp in
      inline-graphics wid ht dp (draw-dummy-box ctx wid ht dp)
    in
    Box(embedf)

  let textbox ?:ctxf it =
    let embedf ctx =
      let ctxf = Option.from (fun x -> x) ctxf in
          read-inline (ctxf ctx) it
    in
    Box(embedf)

  let textbox-with-width ?:ctxf wid it =
    let embedf ctx =
      let ctxf = Option.from (fun x -> x) ctxf in
      embed-block-bottom (ctxf ctx) wid (
        fun ctx -> line-break false false ctx
          (read-inline ctx it ++ inline-fil)
      )
    in
    Box(embedf)

  let textblock ?:ctxf wid bt =
    let embedf ctx =
      let ctxf = Option.from (fun x -> x) ctxf in
      embed-block-bottom (ctxf ctx) wid (
        fun ctx -> read-block ctx bt
      )
    in
    Box(embedf)

  % }}}

  % FigBox の変換 {{{

  let margin left right top bot fb =
    let embedf ctx =
      let ib =
        let top-mgn = inline-graphics 0pt top 0pt (fun (_, _) -> []) in
        let bot-mgn = inline-graphics 0pt bot 0pt (fun (_, _) -> []) in
        line-stack-bottom [top-mgn; embed-figure ctx fb; bot-mgn]
      in
      (inline-skip left) ++ ib ++ (inline-skip right)
    in
    Box(embedf)

  let hmargin len = margin len len 0pt 0pt
  let vmargin len = margin 0pt 0pt len len
  let hvmargin len = margin len len len len

  let draft fb =
    let embedf ctx =
      let ib = embed-figure ctx fb in
      let (wid, ht, dp) = get-natural-metrics ib in
      embed-figure ctx (dummy-box ?:dp wid ht)
    in
    Box(embedf)

  let shift xshift yshift fb =
    let embedf ctx =
      let ib = embed-figure ctx fb in
      let (wid, ht, dp) = get-natural-metrics ib in
      inline-graphics wid ht dp (fun (x, y) -> [
        draw-text (x +' xshift, y +' yshift) ib
      ])
    in
    Box(embedf)

  let gap len =
    let embedf is-horizontal ctx =
      if is-horizontal then
        inline-skip len
      else
        inline-graphics 0pt len 0pt (fun (x, y) -> [])
    in
    AxisDependingBox(embedf)

  let sep ?:lwid ?:clr len =
    let lwid = lwid |> Option.from 0.5pt in
    let clr = clr |> Option.from (Color.black) in
    let embedf is-horizontal ctx =
      if is-horizontal then
        inline-graphics 0pt len 0pt (fun (x, y) -> [
          stroke lwid clr (Gr.line (x, y) (x, y +' len))
        ])
      else
        inline-graphics len 0pt 0pt (fun (x, y) -> [
          stroke lwid clr (Gr.line (x, y) (x +' len, y))
        ])
    in
    AxisDependingBox(embedf)


  let max-length a b = if a >' b then a else b

  let get-max-metrics iblst =
    let metrics-lst = iblst |> List.map (get-natural-metrics) in
    let max-metrics (wid1, ht1, dp1) (wid2, ht2, dp2) =
      ( max-length wid1 wid2, max-length ht1 ht2, max-length dp1 dp2)
    in
    metrics-lst |> List.fold-left max-metrics (0pt, 0pt, 0pt)

  % 高さ ht, 深さ dp になるように ib にマージンをつける．
  % al が 0.0 のときは下揃え． 1.0 のときは上揃え．
  let valign ht dp al ib =
    let (_, ht-ib, dp-ib) = get-natural-metrics ib in
    let diff = (ht +' dp) -' (ht-ib +' dp-ib) in
    % margin 0pt 0pt (diff *' (1. -. al)) (diff *' al) fb ctx
    let top-mgn = inline-graphics 0pt (diff *' (1. -. al)) 0pt (fun (_, _) -> []) in
    let bot-mgn = inline-graphics 0pt (diff *' al) 0pt (fun (_, _) -> []) in
    line-stack-bottom [top-mgn; ib; bot-mgn]

  % 幅 wid になるように ib にマージンをつける．
  % al が 0.0 のときは左揃え． 1.0 のときは右揃え．
  let halign wid al ib =
    let (wid-ib, _, _) = get-natural-metrics ib in
    let diff = wid -' wid-ib in
    inline-skip (diff *' al) ++ ib ++ inline-skip (diff *' (1. -. al))

  let hconcat ?:al fblst =
    let embedf ctx =
      let al = Option.from 0. al in
      let iblst = fblst |> List.map (embed-gap true ctx) in
      let (_, ht, dp) = get-max-metrics iblst in
      let iblst-aligned = iblst |> List.map (valign ht dp al) in
      iblst-aligned |> List.fold-left (++) inline-nil
    in
    Box(embedf)

  let vconcat ?:al fblst =
    let embedf ctx =
      let al = Option.from 0. al in
      let iblst = fblst |> List.map (embed-gap false ctx) in
      let (wid, _, _) = get-max-metrics iblst in
      let iblst-aligned = iblst |> List.map (halign wid al) in
      line-stack-bottom iblst-aligned
    in
    Box(embedf)

  let glass-box ?:als wid ht fb =
    let embedf ctx =
      let (h-al, v-al) = Option.from (0.5, 0.5) als in
      let ib-fig = embed-figure ctx fb in
      let (wid-fig, ht-fig, dp-fig) = get-natural-metrics ib-fig in
      let left-mgn = (max-length 0pt (wid -' wid-fig)) *' h-al in
      let right-mgn = (max-length 0pt (wid -' wid-fig)) *' (1. -. h-al) in
      let top-mgn = (ht -' ht-fig) *' (1. -. v-al) in
      let bot-mgn = (ht -' ht-fig) *' v-al in
      let fb = margin left-mgn right-mgn top-mgn bot-mgn fb in
      embed-figure ctx fb
    in
    Box(embedf)

  let frame thk clr fb =
    let embedf ctx =
      let ib-fig = embed-figure ctx fb in
      let (wid, ht, dp) = get-natural-metrics ib-fig in
      inline-graphics wid ht dp (fun (x, y) -> [
        draw-text (x, y) ib-fig;
        stroke thk clr (Gr.rectangle (x, y -' dp) (x +' wid, y +' ht));
      ])
    in
    Box(embedf)

  let bgcolor clr fb =
    let embedf ctx =
      let ib-fig = embed-figure ctx fb in
      let (wid, ht, dp) = get-natural-metrics ib-fig in
      inline-graphics wid ht dp (fun (x, y) -> [
        fill clr (Gr.rectangle (x, y -' dp) (x +' wid, y +' ht));
        draw-text (x, y) ib-fig;
      ])
    in
    Box(embedf)

  % overlay

  let ghost dcf fb =
    let embedf ctx =
      let ib = embed-figure ctx fb in
      SlydifiOverlay.ghost-inline dcf ib
    in
    Box(embedf)

  let phantom dcf fb =
    let embedf ctx =
      let ib = embed-figure ctx fb in
      SlydifiOverlay.phantom-inline dcf ib
    in
    Box(embedf)

  let select dcf fb-true fb-false =
    let embedf ctx =
      embed-figure ctx (SlydifiOverlay.select dcf fb-true fb-false)
    in
    Box(embedf)
  % }}}

  % Commands {{{

  let-block ctx +fig-block ?:al fb =
    let al = Option.from 0.5 al in
    let ib-fig = embed-figure ctx fb in
    let (wid-fig, _, _) = get-natural-metrics ib-fig in
    let left-margin = ((get-text-width ctx) -' wid-fig) *' al in
    line-break false false ctx ((inline-skip left-margin) ++ ib-fig ++ inline-fil)

  let-block +fig-center fb = '<
    +fig-block?:(0.5)(fb);
  >

  % let-inline ctx \fig-on-right fb =
  %   let ib = embed-figure ctx fb in
  %   let (wid, ht, dp) = get-natural-metrics ib in
  %   let ib-mark =
  %     inline-graphics 0pt 0pt 0pt (fun (x, y) -> [
  %       draw-text
  %         (x +' (get-text-width ctx) -' wid,
  %         y +' (ctx |> get-font-size) -' ht)
  %           ib
  %     ])
  %   in
  %   ib-mark

  let-block ctx +fig-on-right ?:margin fb bt =
    let margin = Option.from 20pt margin in
    let ib = embed-figure ctx fb in
    let (ib-wid, ib-ht, ib-dp) = get-natural-metrics ib in
    let ib-fig =
      inline-graphics 0pt 0pt 0pt (fun (x, y) -> [
        draw-text
          (x +' (get-text-width ctx) -' ib-wid,
          y +' (ctx |> get-font-size) -' ib-ht)
            ib
      ])
    in
    let twid = get-text-width ctx in
    let wid = (get-text-width ctx) -' ib-wid -' margin in
    let ib-content = embed-block-top ctx wid (fun ctx -> read-block ctx bt) in
    line-break false false ctx (ib-fig ++ ib-content)

  let-block ctx +fig-on-left ?:margin fb bt =
    let margin = Option.from 20pt margin in
    let ib = embed-figure ctx fb in
    let (ib-wid, ib-ht, ib-dp) = get-natural-metrics ib in
    let pads = (ib-wid +' margin, 0pt, 0pt, 0pt) in
    let deco (x, y) w h d =
      [ draw-text (x, y +' h -' ib-ht) ib ]
    in
    let ib-content =
      block-frame-breakable ctx pads (deco, deco, deco, deco)
        (fun ctx -> read-block ctx bt)
    in
    ib-content

  let fig-abs-pos ctx pt fb =
    let ib = embed-figure ctx fb in
    inline-graphics 0pt 0pt 0pt (fun _ -> [draw-text pt ib])

  let-inline ctx \fig-abs-pos = fig-abs-pos ctx

  let-block ctx +fig-abs-pos pt fb =
    let it-gr = fig-abs-pos ctx pt fb in
    line-break false false ctx (it-gr ++ inline-fil)

  let-inline ctx \fig-inline ?:align fb =
    let align = Option.from 0. align in
    let ib = embed-figure ctx fb in
    let fsize = get-font-size ctx in
    let (wid, ht, dp) = get-natural-metrics ib in
    let ht-inner = ht *' (1. -. align) +' fsize *' align in
    let dp-inner = 0pt *' (1. -. align) +' (ht -' fsize) *' align in
    inline-graphics wid ht-inner dp-inner
      (fun (x, y) -> [draw-text (x, y -' dp-inner) ib])

  % }}}

end
