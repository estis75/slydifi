%% どんなテーマにも必須のレイアウト。
type frame-layout = (|
  %% 紙面の横幅。
  paper-width: length;
  %% 紙面の縦幅。
  paper-height: length;
  %% テキスト描画領域の横幅。
  text-width: length;
  %% テキスト描画領域の高さ。
  text-height: length;
  %% 紙面の左端から、テキスト描画領域の開始点までのx軸方向の長さ。
  text-horizontal-margin: length;
  %% 紙面の上端から、テキスト描画領域の開始点までのy軸方向の長さに関するパラメータ。
  text-vertical-margin: length;
  %% background graphics の phantom inline-boxes をどこに置くか（適当な負の値を指定）
  bg-gr-start-point: length;
|)

module Frame : sig

  type 'content frame

  val make : frame-layout -> (context -> 'content -> (block-boxes * graphics list)) -> 'content frame

  val embed : context -> 'content -> 'content frame -> (block-boxes * graphics list)

  val to-page : context -> 'content -> 'content frame -> block-boxes

end = struct

  type 'content frame = (|
    layout: frame-layout;
    contentf: context -> 'content -> (block-boxes * graphics list);
  |)

  let-mutable is-first-page <- true

  % 2ページ以降のときに改ページを入れる．
  % is-first-page は，現在 first page かどうかを表す bool ref 型の変数．
  let clear-page-or-nil is-first-page =
    match !is-first-page with
    | true -> let () = is-first-page <- false in block-nil
    | false -> clear-page

  let make layout contentf = (| layout = layout; contentf = contentf|)

  let embed ctx content frame = frame#contentf ctx content

  let to-page ctx content frame =

    let (bb-inner, grlst) = frame#contentf ctx content in
    let box-inner =
      let ib-inner = embed-block-top ctx frame#layout#text-width (fun _ -> bb-inner) in
      line-break false false ctx ib-inner
    in
    let bb-gr =
      let spacing-bg-gr = frame#layout#text-vertical-margin -' frame#layout#bg-gr-start-point in
      let ctx-bg-gr = ctx |> set-paragraph-margin 0pt spacing-bg-gr in
      line-break true false ctx-bg-gr (inline-graphics 0pt 0pt 0pt (fun _ -> grlst) ++ inline-fil)
    in
    (clear-page-or-nil is-first-page) +++ bb-gr +++ box-inner

end
