
module SlydifiColor : sig

  val gray   : float -> color
  val rgb    : float -> float -> float -> color
  val html-color : int   -> color
  val black  : color
  val white  : color
  val red    : color
  val yellow : color
  val orange : color
  val blue   : color

  % val are : color * color -> color
  val rgb-value : color -> (float * float * float)
  val inner-color : color -> color -> float -> color

end = struct

  let gray x = Gray(x)

  let rgb r g b = RGB(r, g, b)

  let html-color rgb =
    let r = rgb / 65536 in
    let g = (rgb - r * 65536) / 256 in
    let b = rgb mod 256 in
    RGB(float r /. 255. , float g /. 255. , float b /. 255.)

  let rgb-value clr =
    match clr with
    | RGB(r, g, b) -> (r, g, b)
    | Gray(z) -> (z, z, z)
    | CMYK(c, m, y, k) -> (0., 0., 0.)

  let inner-color clr1 clr2 r =
    let (r1, g1, b1) = rgb-value clr1 in
    let (r2, g2, b2) = rgb-value clr2 in
    let inner-division f1 f2 r = f1 *. r +. f2 *. (1. -. r) in
    RGB(inner-division r1 r2 r, inner-division g1 g2 r, inner-division b1 b2 r)

  let black  = gray 0.
  let white  = gray 1.
  let red    = rgb 1. 0. 0.
  let yellow = rgb 1. 1. 0.
  let orange = rgb 1. 0.5 0.
  let blue   = rgb 0. 0. 1.
end
