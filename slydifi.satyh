@require: math

module Slydifi : sig

  val document: 'a -> block-text -> document

  direct +p : [inline-text] block-cmd

end = struct

  % 文書設定 {{{1
  let font-size-normal  = 12pt
  let font-size-frame-title = 20pt
  let font-size-header-footer = 8pt
  let font-size-title   = 18pt
  let font-size-author  = 14pt
  let font-size-date  = 14pt
  let font-size-institute  = 10pt
  let font-size-section = 18pt

  let paper-width  = 12.8cm
  let paper-height = 9.6cm
  let header-height = 12pt
  let footer-height = 12pt
  let text-horizontal-margin = 1cm
  let text-vertical-margin = font-size-normal *' .5
  let text-height = paper-height -' text-vertical-margin *' 2. -' footer-height -' header-height
  let text-width  = paper-width -' text-horizontal-margin *' 2.
  let text-origin = (text-horizontal-margin, header-height)

  let font-ratio-latin = 1.
  let font-ratio-cjk = 0.88

  let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
  let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
  let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
  let font-cjk-mincho   = (`ipaexm`    , font-ratio-cjk  , 0.)
  let font-cjk-gothic   = (`ipaexg`    , font-ratio-cjk  , 0.)

  let set-cjk-font font ctx =
    ctx |> set-font HanIdeographic font
        |> set-font Kana           font
  % }}}


  let get-standard-context wid =
    get-initial-context wid (command \math)
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-font Kana           font-cjk-mincho
      |> set-font HanIdeographic font-cjk-mincho
      |> set-font Latin          font-latin-roman
      |> set-math-font `lmodern`
      |> set-hyphen-penalty 100

  let document record inner =

    let page = UserDefinedPaper  (paper-width, paper-height) in

    let ctx-doc = get-standard-context text-width in

    let bb-main = read-block ctx-doc inner in

    let pagecontf _ = (|
      text-origin = (text-horizontal-margin, text-vertical-margin);
      text-height = text-height;
    |)
    in

    let pagepartsf _ = (|
      header-origin  = (0pt, 0pt);
      header-content = block-nil;
      footer-origin  = (0pt, 0pt);
      footer-content = block-nil;
    |)
    in

    page-break page pagecontf pagepartsf bb-main

  let-block ctx +p it =
    line-break true true ctx
      (read-inline ctx it ++ inline-fil)
end
