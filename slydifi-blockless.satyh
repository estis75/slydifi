% vim: foldmethod=marker
@require: gr
@require: math
@require: list
@require: annot
@import: slydifi-color
@import: slydifi-footnote-scheme
@import: slydifi-enumitem-blockless
@import: slydifi-code-blockless
@require: satysfi-lib/block

type block = context -> block-boxes
type cel = int -> block

% TODO: 本当は Shift や Phantom は関数化したほうがいい．
% image-shift: length -> length -> imginfo -> imginfo
% のような関数を作れば JPEG(100pt, `hoge.jpg`) |> image-shift 10pt 0pt
% のように imginfo を生成できて便利．
% しかし現状，context の扱いが難しく実装困難．
type imginfo =
  | JPEG of length * string               % width * filepath
  | PDF of length * string * int          % width * filepath * page-number
  | Block of length * block list          % width * text
  | Cel of length * cel list          % width * text
  | DummyBox of length * length           % width * height
  | Shift of length * length * imginfo  % (x-shift , y-shift) * imginfo
  | Phantom of imginfo

type celRange =
  | Always of unit
  | Only of int
  | Before of int
  | After of int
  | Range of int * int
  | GeneralRange of int -> bool
  | InvRange of celRange

let phantom-block bb = block-skip (get-natural-length bb)

let-inline ctx \SLyDiFi =
  let size = get-font-size ctx in
  let f = read-inline ctx in
  let fd = ctx |> set-manual-rising (0pt -' (size *' 0.25)) |> read-inline in
  let fI = ctx |> set-font-size (size *' 0.72)
               |> set-manual-rising (size *' 0.2)
               |> read-inline
  in
  let ib =
    f {SL} ++ kern(size *' 0.05) ++ fd{Y} ++ kern(size *' 0.03) ++ f{DIF}
      ++ kern(size *' 0.05) ++ fd{I}
  in
  script-guard Latin (no-break ib)

let-rec power-float-int r m =
  match m with
  | 0 -> 1.
  | _ -> (power-float-int r (m - 1)) *. r

let max-float f1 f2 = if (1pt *' f1) >' (1pt *' f2) then f1 else f2

module Slydifi : sig

  % Signature {{{
  val document: 'a -> block list -> document
    constraint 'a :: (|
      fonts: (|
        frame-title-cjk : string;
        normal-text-cjk : string;
        frame-title-latin : string;
        normal-text-latin : string;
        mono-text-latin : string;
        font-ratio-cjk : float;
      |);
      draft-mode : bool;
    |)

  val paper-width : length
  val paper-height : length

  direct \emph : [inline-text] inline-cmd
  direct \textbf : [inline-text] inline-cmd
  direct \text-color : [color; inline-text] inline-cmd
  direct \br : [] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \insert-image : [imginfo] inline-cmd
  direct \fig-abs-pos : [(length * length); imginfo] inline-cmd
  direct \fig-right : [imginfo] inline-cmd
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

  val section : inline-text list -> block list -> block

  val frame-anime : int -> inline-text -> cel list -> block
  val frame : inline-text -> cel list -> block
  val frame-anime-nt : int -> cel list -> block
  val frame-nt : cel list -> block

  val make-title : block list -> block
  val title: inline-text list -> block
  val author: inline-text list -> block
  val date: inline-text list -> block

  val p-ghost : celRange -> inline-text -> cel
  val p-fox : celRange -> inline-text -> inline-text -> cel
  val p : inline-text -> cel
  val listing : itemize -> cel

  val centered-image : imginfo -> cel
  val fig-abs-pos : (length * length) -> imginfo -> cel

  % val layer : displayRange -> block list -> block
  % val frame-overlay : int -> inline-text -> block list -> block
  % }}}

end = struct

  % blockless satysfi
  let block-list-to-block-boxes ctx b =
    b |> List.map (fun b -> b ctx)
      |> Block.concat

  let cel-list-to-block-boxes ctx c cel-num =
    c |> List.map (fun c -> c cel-num ctx)
      |> Block.concat

  % 文書設定 {{{1
  let font-size-normal  = 20pt
  let font-size-frame-title = 28pt
  let font-size-header-footer = 12pt
  let font-size-title   = 32pt
  let font-size-author  = 20pt
  let font-size-date  = 18pt
  let font-size-institute  = 20pt
  let font-size-section = 28pt
  let font-size-footnote = 12pt

  % PowerPoint の文書サイズに合わせる
  % let paper-width  = 12.8cm
  % let paper-height = 9.6cm
  let paper-width = 25.4cm
  let paper-height = 14.29cm
    % let header-height = 12pt
  let header-height = 24pt
  let footer-height = 24pt
  let text-horizontal-margin = 30pt
  let text-vertical-margin = font-size-normal *' 1.0
  let text-height = paper-height -' text-vertical-margin *' 2.
  let text-width  = paper-width -' text-horizontal-margin *' 2.

  let relwid relx = paper-width *' relx
  let relht rely = paper-height *' rely
  let relpt relx rely = (relwid relx, relht rely)

  let font-ratio-latin = 1.

  let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
  let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
  let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
  let font-latin-mono   = (`lmmono`    , font-ratio-latin, 0.)
  let font-cjk-mincho   = (`ipaexm`    , 1.0  , 0.)
  let font-cjk-gothic   = (`ipaexg`    , 1.0  , 0.)

  let set-cjk-font font ctx =
    ctx |> set-font HanIdeographic font
        |> set-font Kana           font

  % grid
  let main-grid-size = 50pt
  let sub-grid-size = 10pt

  % page
  let-mutable is-first-page <- true

  % colors

  let color-title = SlydifiColor.html-color 0x076678
  let color-bg = SlydifiColor.html-color 0xF9F5D7
  let color-fg = SlydifiColor.html-color 0x282828
  let color-emph = SlydifiColor.html-color 0xCC241D
  let color-link = SlydifiColor.html-color 0x8F3F71
  let color-footer = SlydifiColor.inner-color color-bg color-fg 0.5

  let main-grid-color = SlydifiColor.inner-color color-bg color-fg 0.7
  let sub-grid-color = SlydifiColor.inner-color color-bg color-fg 0.9


  % options {{{
  let-mutable fonts-frame-title-cjk   <- ` `
  let-mutable fonts-frame-title-latin <- ` `
  let-mutable fonts-normal-text-cjk   <- ` `
  let-mutable fonts-normal-text-latin <- ` `
  let-mutable fonts-mono-text-latin   <- ` `
  let-mutable fonts-font-ratio-cjk    <- 1.0
  let-mutable draft-mode              <- false
  % }}}
  % }}}

  % document command {{{

  let clear-page-or-nil is-first-page =
    match !is-first-page with
    | true ->
        let () = is-first-page <- false in
        block-nil
    | false -> clear-page

  let get-standard-context wid =
    get-initial-context wid (command \math)
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-font Kana           font-cjk-mincho
      |> set-font HanIdeographic font-cjk-mincho
      |> set-font Latin          font-latin-roman
      |> set-font-size font-size-normal
      |> set-math-font `lmodern`
      |> set-hyphen-penalty 100
      |> set-leading (font-size-normal *' 1.4)
      |> set-paragraph-margin (font-size-normal *' 0.6) (font-size-normal *' 0.6)
      |> set-text-color color-fg

  let document record inner =

    let page = UserDefinedPaper  (paper-width, paper-height) in

    let () = fonts-frame-title-cjk   <- record#fonts#frame-title-cjk in
    let () = fonts-frame-title-latin <- record#fonts#frame-title-latin in
    let () = fonts-normal-text-cjk   <- record#fonts#normal-text-cjk in
    let () = fonts-normal-text-latin <- record#fonts#normal-text-latin in
    let () = fonts-font-ratio-cjk    <- record#fonts#font-ratio-cjk in
    let () = fonts-mono-text-latin   <- record#fonts#mono-text-latin in
    let () = draft-mode              <- record#draft-mode in

    let ctx-doc = (get-standard-context text-width)
      |> set-font Kana (record#fonts#normal-text-cjk, !fonts-font-ratio-cjk, 0.)
      |> set-font HanIdeographic (record#fonts#normal-text-cjk, !fonts-font-ratio-cjk, 0.)
      |> set-font Latin (record#fonts#normal-text-latin, font-ratio-latin, 0.)
    in

    let bb-main = block-list-to-block-boxes ctx-doc inner in

    let pagecontf _ =
      let () = FootnoteScheme.start-page () in
      (|
        text-origin = (text-horizontal-margin, text-vertical-margin);
        text-height = text-height;
      |)
    in

    let pagepartsf pbinfo =
      let footer =
        let ctx = get-standard-context paper-width
          |> set-font Latin (record#fonts#normal-text-latin, font-ratio-latin, 0.)
          |> set-font-size font-size-header-footer
          |> set-text-color color-footer
        in
        let it-pageno = embed-string (arabic pbinfo#page-number) in
        let it-count = match get-cross-reference `pagecount` with
          | None -> {??}
          | Some(i) -> embed-string i
        in
        line-break true true ctx (inline-fil ++ (read-inline ctx {#it-pageno;/#it-count;}) ++ inline-skip 20pt)
      in
      (|
      header-origin  = (0pt, 0pt);
      header-content = block-nil;
      footer-origin  = (0pt, paper-height -' footer-height);
      footer-content = footer;
      |)
    in

    let hook = line-break false false (get-standard-context 0pt)
        (hook-page-break (fun pbInfo _ -> (
            let numpages = pbInfo#page-number in
            register-cross-reference `pagecount` (arabic numpages)
        )))
    in

    page-break page pagecontf pagepartsf (bb-main +++ hook)

  % }}}

  % common function in slides {{{
  let-rec range n1 n2 =
    let-rec aux min max =
      if min == max  then [min] else min :: (aux (min + 1) max)
    in
    if n1 < n2 then (aux n1 n2) else (aux n2 n1)

  let ib-bg =
    let rect-bg =
      fill color-bg (Gr.rectangle (0pt, 0pt) (paper-width, paper-height))
    in
    inline-graphics 0pt 0pt 0pt (fun _ -> [rect-bg])

  let bg-grids grid-wid grid-ht grid-color =
    let n-grid-vertical   = round(paper-width  /' grid-wid) in
    let n-grid-horizontal = round(paper-height /' grid-ht)  in
    let vlines =
      List.map (
        fun n -> Gr.line (grid-wid *' float(n), 0pt) (grid-wid *' float(n), paper-height)
      ) (range 1 n-grid-vertical) in
      % [Gr.line (grid-wid, 0pt) (grid-wid, paper-height)] in
    let hlines =
      List.map (
        fun n -> Gr.line (0pt, grid-ht *' float(n)) (paper-width, grid-ht *' float(n))
      ) (range 1 n-grid-horizontal) in
    % let hlines = [Gr.line (0pt, grid-ht) (paper-width, grid-ht)] in
    let lines = List.append vlines hlines in
    let grid = List.map (stroke 1pt grid-color) lines in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> grid) in
    ib

  let make-grids dmode =
    let main-grid = bg-grids main-grid-size main-grid-size main-grid-color in
    let sub-grid = bg-grids sub-grid-size sub-grid-size sub-grid-color in
    if dmode then (sub-grid ++ main-grid) else inline-nil

  let bb-bg ctx dmode =
    let ctx-phantom =
      ctx |> set-font-size 0pt
          |> set-paragraph-margin 0pt 0pt
          |> set-leading 0pt
    in
    (line-break true true ctx-phantom (ib-bg ++ (make-grids dmode) ++ inline-fil))

  % Overlay

  % celRange 型を，
  % layer 番号 i が， celRange で定まる範囲に入っているかどうかを表す
  % int -> bool 型に変換する．
  let-rec is-in-range : celRange -> int -> bool | cel-range i =
    match cel-range with
    | Always() -> true
    | Only(n) -> (i == n)
    | Before(n) -> (i <= n)
    | After(n) -> (i >= n)
    | Range(m, n) -> (i >= m) && (i <= n)
    | GeneralRange(f) -> (f i)
    | InvRange(crange) -> is-in-range crange i

  % cel-num (cel number) が crange (cel range) に入っているときだけ
  % 具現化され，それ以外は phantom となる block-box.
  let ghost-block crange cel-num bb =
    if is-in-range crange cel-num then bb else phantom-block bb

  % cel-num が crange に入っているときだけ bb-true が使われ，
  % それ以外は bb-false に擬態する block-box.
  let fox-block crange cel-num bb-true bb-false =
    if is-in-range crange cel-num then bb-true else bb-false

  % }}}

  % make-title{} function {{{

  % title config
  let title-xmin = relwid 0.18
  let title-xmax = title-xmin +' 8pt
  let title-ymin = relht 0.42
  let title-ymax = title-ymin +' 8pt
  let title-width = text-width *' 0.8
  let author-width = text-width *' 0.8
  let date-ymin = relht 0.2
  let title-mgn = 16pt

  let put-text point align ib =
    let (w, h, d) = get-natural-metrics ib in
    % xalgin: 0. で左揃え，0.5 で中央揃え，1. で右揃え
    % yalgin: 0. で下揃え，0.5 で中央揃え，1. で上揃え
    let (xalign, yalign) = align in
    let (pointx, pointy) = point in
    let xpos = pointx -' w *' xalign in
    let ypos = pointy +' d -' (h +' d) *' yalign in
    draw-text (xpos, ypos) ib  % x, y に関わらず point の絶対座標で決める
  % inline-graphics wid ht 0pt (fn)

  % +make-title の中で使う
  let title its-title ctx =
    let ctx-title = ctx |> set-font-size font-size-title
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-title *' 0.25 in
    let bbs-title ctx =
      its-title |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-title = embed-block-top ctx-title title-width
      (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
    in
    let draw-title =
      [(put-text (title-xmax +' title-mgn, title-ymax +' title-mgn)
        (0., 0.) ib-title);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-title) in
    (line-break true false ctx (ib ++ inline-fil))

  % +make-title の中で使う
  let author its-author ctx =
    let ctx-author = ctx |> set-font-size font-size-author
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-author *' 0.25 in
    let bbs-author ctx =
      its-author |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-author = embed-block-top ctx-author author-width
      (fun ctx -> (bbs-author ctx |> List.fold-left (+++) block-nil))
    in
    let draw-author =
      [(put-text (title-xmax +' title-mgn, title-ymin -' title-mgn)
        (0., 1.) ib-author);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-author) in
    (line-break true false ctx (ib ++ inline-fil))

  % +make-title の中で使う
  let date its-date ctx =
    let ctx-date = ctx |> set-font-size font-size-date
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-date *' 0.25 in
    let bbs-date ctx =
      its-date |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-date = embed-block-top ctx-date author-width
      (fun ctx -> (bbs-date ctx |> List.fold-left (+++) block-nil))
    in
    let draw-date =
      [(put-text (title-xmax +' title-mgn, date-ymin -' title-mgn)
        (0., 1.) ib-date);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-date) in
    (line-break true false ctx (ib ++ inline-fil))

  let make-title bt-inner ctx =
    let north-rect = Gr.rectangle (title-xmin, title-ymax) (title-xmax, relht 1.00) in
    let south-rect = Gr.rectangle (title-xmin, title-ymin) (title-xmax, relht 0.00) in
    let east-rect  = Gr.rectangle (title-xmax, title-ymin) (relwid 1.00, title-ymax) in
    let west-rect  = Gr.rectangle (title-xmin, title-ymin) (relwid 0.00, title-ymax) in

    let draw-titleframe =
      [
        (fill color-title north-rect);
        (fill color-title south-rect);
        (fill color-title east-rect);
        (fill color-title west-rect);
      ]
    in
    let ib =
      inline-graphics 0pt 0pt 0pt (fun _ -> draw-titleframe)
    in
    (clear-page-or-nil is-first-page) +++
    (bb-bg ctx !draft-mode) +++ (line-break true false ctx (ib ++ inline-fil))
      +++ (block-list-to-block-boxes ctx bt-inner)

  % }}}

  % frame{} function {{{

  let placeholder height (origX, origY) =
    [fill Color.white (Gr.rectangle (origX, origY) (origX, origY +' height))]

  let make-frame-title ctx =

    ctx |> set-font-size font-size-frame-title
        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
        |> set-text-color color-title

  let make-placeholder ctx glue-height =
    let ht = length-max 0pt glue-height in
    let ctx2 = ctx |> set-paragraph-margin 0pt 0pt in
    line-break true false ctx2 (inline-graphics 0pt ht 0pt (placeholder ht) ++ inline-fil)

  let frame-anime max-frame title inner ctx =
    let ctx-title = make-frame-title ctx in
    let title-padding = 12pt in
    let deco (x, y) wid hgt dpt =
      let path1 =
        let xL = x -' text-horizontal-margin +' title-padding in
        let yT = y +' text-vertical-margin in
        let xR = xL +' paper-width -' title-padding *' 2.0 in
        let yB = yT -' 3pt in
        Gr.rectangle (xL, yT) (xR, yB)
      in
      [
        (fill color-title path1);
      ]
    in
    let bb-title cel-num =
      let it-number =
        if max-frame == 1 then {}
        else
          let it-cel-num = embed-string(arabic cel-num) in
          let it-max-frame = embed-string(arabic max-frame) in
          { (#it-cel-num;/#it-max-frame;)}
      in
      let ib-title = read-inline ctx-title {#title;#it-number;} in
      block-frame-breakable
        (ctx |> set-paragraph-margin 0pt 0pt)
          (title-padding -' text-horizontal-margin, title-padding,
          title-padding -' text-vertical-margin, title-padding +' text-vertical-margin)
            (deco, deco, deco, deco)
              (fun ctx ->
                line-break true true (make-frame-title ctx) (ib-title ++ inline-fil)
              )
    in
    let ib-inner cel-num = embed-block-top ctx text-width (fun ctx -> cel-list-to-block-boxes ctx inner cel-num) in
    let bb-inner cel-num = line-break false false ctx (ib-inner cel-num) in
    % let glue-height = (text-height -' footer-height -' header-height -' get-natural-length bb-inner -' get-natural-length bb-title) *' .5 in
    % let bb-glue = make-placeholder ctx glue-height in

    let-rec content n =
      if n == 0
      then block-nil
      else
      (content (n - 1)) +++
        (clear-page-or-nil is-first-page) +++
        (bb-bg ctx !draft-mode) +++ (bb-title n) +++ (bb-inner n)
    in

    content max-frame

  % let frame title inner ctx =
  %   let ctx-title = make-frame-title ctx in
  %   let title-padding = 12pt in
  %   let deco (x, y) wid hgt dpt =
  %     let path1 =
  %       let xL = x -' text-horizontal-margin +' title-padding in
  %       let yT = y +' text-vertical-margin in
  %       let xR = xL +' paper-width -' title-padding *' 2.0 in
  %       let yB = yT -' 3pt in
  %       Gr.rectangle (xL, yT) (xR, yB)
  %     in
  %     [
  %       (fill color-title path1);
  %     ]
  %   in
  %   let bb-title =
  %     let ib-title = read-inline ctx-title title in
  %     block-frame-breakable
  %       (ctx |> set-paragraph-margin 0pt 0pt)
  %         (title-padding -' text-horizontal-margin, title-padding,
  %         title-padding -' text-vertical-margin, title-padding +' text-vertical-margin)
  %           (deco, deco, deco, deco)
  %             (fun ctx ->
  %               line-break true true (make-frame-title ctx) (ib-title ++ inline-fil)
  %             )
  %   in
  %   let ib-inner = embed-block-top ctx text-width (fun ctx -> block-list-to-block-boxes ctx inner) in
  %   let bb-inner = line-break false false ctx ib-inner in
  %   let glue-height = (text-height -' footer-height -' header-height -' get-natural-length bb-inner -' get-natural-length bb-title) *' .5 in
  %   let bb-glue = make-placeholder ctx glue-height in
  %   (clear-page-or-nil is-first-page) +++
  %   (bb-bg ctx !draft-mode) +++
  %     bb-title % +++ bb-glue
  %       +++ bb-inner
  %         % bb-title +++ bb-inner +++ clear-page

  let frame = frame-anime 1

  let frame-anime-nt max-frame inner ctx =

    let ib-inner cel-num = embed-block-top ctx text-width (fun ctx -> cel-list-to-block-boxes ctx inner cel-num) in
    let bb-inner cel-num = line-break false false ctx (ib-inner cel-num) in

    let-rec content n =
      if n == 0
      then block-nil
      else
      (content (n - 1)) +++
        (clear-page-or-nil is-first-page) +++
        (bb-bg ctx !draft-mode) +++ (bb-inner n)
    in

    content max-frame

  let frame-nt = frame-anime-nt 1

      % }}}

  % 文書構造 {{{

  let section-title ctx its-title =
    let ctx-title = ctx |> set-font-size font-size-title
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-title *' 0.25 in
    let bbs-title ctx =
      its-title |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-title = embed-block-top ctx-title title-width
      (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
    in
    let draw-title =
      [(put-text (title-xmax +' title-mgn, title-ymax +' title-mgn)
        (0., 0.) ib-title);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-title) in
    (line-break true false ctx (ib ++ inline-fil))

  let section its bt ctx =
    let sec-title-xmin = title-xmin in
    let sec-title-ymin = title-ymin in
    let sec-title-xmax = title-xmin +' 5pt in
    let sec-title-ymax = title-ymin +' 5pt in
    let north-rect = Gr.rectangle (sec-title-xmin, sec-title-ymax) (sec-title-xmax, relht 1.00) in
    let south-rect = Gr.rectangle (sec-title-xmin, sec-title-ymin) (sec-title-xmax, relht 0.00) in
    let east-rect  = Gr.rectangle (sec-title-xmax, sec-title-ymin) (relwid 1.00, sec-title-ymax) in
    let west-rect  = Gr.rectangle (sec-title-xmin, sec-title-ymin) (relwid 0.00, sec-title-ymax) in
    let cent-rect  = Gr.rectangle (sec-title-xmin, sec-title-ymin) (sec-title-xmax, sec-title-ymax) in
    let rect-color = SlydifiColor.inner-color color-title color-bg 0.4 in
    let draw-titleframe =
      [
        (fill rect-color north-rect);
        (fill rect-color south-rect);
        (fill rect-color east-rect);
        (fill rect-color west-rect);
        (fill color-title cent-rect);
      ]
    in
    let ib =
      inline-graphics 0pt 0pt 0pt (fun _ -> draw-titleframe)
    in
    (clear-page-or-nil is-first-page) +++
    (bb-bg ctx !draft-mode) +++ (line-break true false ctx (ib ++ inline-fil))
      +++ (section-title ctx its) +++ (block-list-to-block-boxes ctx bt)

  % let p it ctx =
  %   line-break true true ctx (read-inline ctx it ++ inline-fil)

  let p-ghost crange it cel-num ctx =
    ghost-block crange cel-num
      (line-break true true ctx (read-inline ctx it ++ inline-fil))

  let p-fox crange it1 it2 cel-num ctx =
    let ib-paragraph it =
      line-break true true ctx (read-inline ctx it ++ inline-fil)
    in
    fox-block crange cel-num (ib-paragraph it1) (ib-paragraph it2)

  let p = p-ghost (Always())



  % }}}

  % インラインテキスト装飾 {{{

  let-inline ctx \emph it =
    let ctx2 = ctx |> set-text-color color-emph
                   |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                   |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
    in
    (read-inline ctx2 it)

  let-inline ctx \text-color clr it =
    let ctx2 = ctx |> set-text-color clr in
    (read-inline ctx2 it)

  let-inline ctx \textbf it =
    let ctx2 = ctx |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                   |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
    in
    (read-inline ctx2 it)

  let-inline ctx \link ?:it url =
    let ctx2 = ctx |> set-text-color color-link in
    let ctx-link = match it with
      | None    -> ctx2 |> set-font Latin (!fonts-mono-text-latin, 1.0, 0.)
      | Some(v) -> ctx2
    in
    let text = match it with
      | None    -> (embed-string url)
      | Some(v) -> v
    in
    read-inline ctx-link {\href(url){#text;}}

  let-inline ctx \br =
    discretionary (- 1000) inline-nil inline-fil inline-nil

  % }}}

  % 画像追加 {{{

  let draw-dummy-box wid ht (x, y) =
    let rect-path = Gr.rectangle (x, y) (x +' wid, y +' ht) in
    [(stroke 1pt color-fg rect-path)]

  let-rec insert-image ctx img-info =
    match img-info with
    | JPEG(wid, srcpath) ->
        let img = load-image srcpath in
        use-image-by-width img wid
    | PDF(wid, srcpath, num) ->
        let img = load-pdf-image srcpath num in
        use-image-by-width img wid
    | Block(wid, bt) ->
        let ib = embed-block-top ctx wid (fun ctx -> block-list-to-block-boxes ctx bt) in
        ib
    | Cel(wid, bt) ->
        let ib = embed-block-top ctx wid (fun ctx -> cel-list-to-block-boxes ctx bt 1) in
        ib
    | DummyBox(wid, ht) ->
        inline-graphics wid ht 0pt (draw-dummy-box wid ht)
    | Shift(xs, ys, inner-img-info) ->
        let ib = insert-image ctx inner-img-info in
        let (wid-ib, ht-ib, dp-ib) = get-natural-metrics ib in
        inline-graphics wid-ib ht-ib dp-ib
          (fun (x, y) -> [draw-text (x +' xs, y +' ys) ib])
    | Phantom(inner-img-info) ->
        let ib = insert-image ctx inner-img-info in
        let (wid-ib, ht-ib, dp-ib) = get-natural-metrics ib in
        inline-graphics wid-ib ht-ib 0pt (draw-dummy-box wid-ib ht-ib)

  let centered-image-cel crange img-info cel-num ctx =
    ghost-block crange cel-num
      (line-break true true ctx (inline-fil ++ (insert-image ctx img-info) ++ inline-fil))

  let centered-image = centered-image-cel (Always())

  let-inline ctx \insert-image img-info = insert-image ctx img-info

  let absolute-fig ctx pt img-info =
    % DummyBox が inline-graphics を無用に2回使ってしまう
    let ib = insert-image ctx img-info in
    inline-graphics 0pt 0pt 0pt (fun _ -> [draw-text pt ib])

  let-inline ctx \fig-abs-pos pt img-info =
    absolute-fig ctx pt img-info

  let fig-abs-pos-cel crange pt img-info cel-num ctx =
    let it-gr = absolute-fig ctx pt img-info in
    ghost-block crange cel-num
      (line-break true true ctx (it-gr ++ inline-fil))

  let fig-abs-pos = fig-abs-pos-cel (Always())

  let-inline ctx \fig-right img-info =
    let ib = insert-image ctx img-info in
    let (ib-w, ib-h, ib-d) = get-natural-metrics ib in
    inline-graphics 0pt 0pt 0pt (fun (x, y) ->
      [
        draw-text
          (paper-width -' text-horizontal-margin -' ib-w,
          y +' (ctx |> get-font-size) -' ib-h) ib
      ])

  % }}}

  % +listing{} command {{{

  let label-dia ctx idx =
    let path (x, y) =
      let yc = y +' font-size-normal *' 0.3 in
      let north = yc +' font-size-normal *' 0.25 in
      let east  = x  +' font-size-normal *' 0.25 in
      let south = yc -' font-size-normal *' 0.25 in
      let west  = x  -' font-size-normal *' 0.25 in
      start-path (x, north)
        |> line-to (east, yc)
        |> line-to (x, south)
        |> line-to (west, yc)
        |> close-with-line
    in
    let gr (x, y) = [fill color-title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-tria ctx idx =
    let path (x, y) =
      let yc = y +' font-size-normal *' 0.3 in
      let xl = x in
      let xr = x +' font-size-normal *' 0.4 in
      let yu = yc +' font-size-normal *' 0.2 in
      let yd = yc -' font-size-normal *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill color-title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-circ ctx idx =
    let path (x, y) =
      let cx = x +' font-size-normal *' 0.3 in
      let cy = y +' font-size-normal *' 0.3 in
      let r = font-size-normal *' 0.15 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill color-title (path (x, y))] in
    inline-graphics 8pt 8pt 0pt (gr) ++ inline-skip 8pt

  let label-rule depth =
    match depth with
    | 0 -> label-dia
    | 1 -> label-tria
    | _ -> label-circ

  let listing item _ = (genlistings label-rule item)

  % }}}

  % \footnote{} command {{{

  let-inline ctx \footnotetext ref-label it =
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (font-size-footnote *' 0.9)
            |> set-leading (font-size-footnote *' 1.2)
            |> set-paragraph-margin (font-size-footnote *' 0.5) (font-size-footnote *' 0.5)
          %temporary
      in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (font-size-footnote *' 0.9)
            |> set-leading (font-size-footnote *' 1.2)
            |> set-paragraph-margin (font-size-footnote *' 0.5) (font-size-footnote *' 0.5)
          %temporary
      in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

  % }}}

end


let section = Slydifi.section
let frame-anime = Slydifi.frame-anime
let frame = Slydifi.frame
let frame-nt = Slydifi.frame-nt
let frame-anime-nt = Slydifi.frame-anime-nt
let make-title = Slydifi.make-title
let title = Slydifi.title
let author = Slydifi.author
let date = Slydifi.date
let p-ghost = Slydifi.p-ghost
let p-fox = Slydifi.p-fox
let p = Slydifi.p
let listing = Slydifi.listing
let centered-image = Slydifi.centered-image
let fig-abs-pos = Slydifi.fig-abs-pos
