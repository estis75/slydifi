% -*- coding: utf-8 -*-
% vim:foldmethod=marker:

@require: code
@require: annot
@import: ../slydifi


let-inline \jugem = {
  寿限無寿限無，五劫の擦り切れ，
  海砂利水魚の水行末雲来末風来末，
  喰う寝る処に住む処，
  藪柑子の藪柑子，
  パイポ・パイポ・パイポのシューリンガン，
  シューリンガンのグーリンダイ，
  グーリンダイのポンポコピーのポンポコナーの，
  長久命の長助．
}
in

Slydifi.document(|
  fonts = (|
    frame-title-cjk = `mplus-sans-b`;
    normal-text-cjk  = `mplus-sans-r`;
    frame-title-latin = `mplus-sans-b`;
    normal-text-latin  = `mplus-sans-r`;
    mono-text-latin  = `mplus-mono-r`;
    font-ratio-cjk = 1.0;
  |);
|)'<

   +make-title<
     +title{
       |\SLyDiFi; でらくらくスライド作成
       |}
     +author{
       |monaqa
       |}
      +date{|2019年8月3日|}
   >

  +frame{\SLyDiFi;: \SATySFi; のスライド作成用パッケージ}<
    +listing{
      * \emph{\SATySFi;} (\link(`https://github.com/gfngfn/SATySFi`);)
        ** 静的型付き関数型言語ベースの新たな組版処理システム
        ** 普通の文書作成時にはそこまで関数型言語を意識しなくてよい
        ** パッケージをカスタマイズする際の構文は OCaml 風

      * \emph{\SLyDiFi;} (\link(`https://github.com/monaqa/slydifi`);)
        ** \SATySFi; でスライドを作成することができる
        ** 実は既に先駆者がいる（\link?:({Steamer})(`https://github.com/konn/satysfi-steamer`);）
    }
    % +p{
    %   \jugem;
    % }
  >

  +frame{画像はりテスト
  \fig-abs-pos
  ((Slydifi.paper-width *' 0.9, Slydifi.paper-height *' 0.9))
  (PDF(30pt, `./logo.pdf`, 1));
  }<
    +p{
      いろんな画像が貼れる．
      \insert-image(PDF(100pt, `./logo.pdf`, 1)); や
      \insert-image(JPEG(100pt, `./logo.jpg`)); など．
    }
    +centered-image(PDF(200pt, `./logo.pdf`, 1));
  >
>
